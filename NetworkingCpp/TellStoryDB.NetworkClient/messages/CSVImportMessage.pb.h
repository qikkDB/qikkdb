// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/CSVImportMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2fCSVImportMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2fCSVImportMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2fCSVImportMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2fCSVImportMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2fCSVImportMessage_2eproto;
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {
class CSVImportMessage;
class CSVImportMessageDefaultTypeInternal;
extern CSVImportMessageDefaultTypeInternal _CSVImportMessage_default_instance_;
}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB
PROTOBUF_NAMESPACE_OPEN
template<> ::ColmnarDB::NetworkClient::Message::CSVImportMessage* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::CSVImportMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {

enum DataType : int {
  CONST_INT = 0,
  CONST_ERROR = -1,
  CONST_LONG = 1,
  CONST_FLOAT = 2,
  CONST_DOUBLE = 3,
  CONST_POINT = 4,
  CONST_POLYGON = 5,
  CONST_STRING = 6,
  CONST_INT8_T = 7,
  COLUMN_INT = 8,
  COLUMN_LONG = 9,
  COLUMN_FLOAT = 10,
  COLUMN_DOUBLE = 11,
  COLUMN_POINT = 12,
  COLUMN_POLYGON = 13,
  COLUMN_STRING = 14,
  COLUMN_INT8_T = 15,
  DATA_TYPE_SIZE = 16,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = CONST_ERROR;
constexpr DataType DataType_MAX = DATA_TYPE_SIZE;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    const std::string& name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class CSVImportMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.CSVImportMessage) */ {
 public:
  CSVImportMessage();
  virtual ~CSVImportMessage();

  CSVImportMessage(const CSVImportMessage& from);
  CSVImportMessage(CSVImportMessage&& from) noexcept
    : CSVImportMessage() {
    *this = ::std::move(from);
  }

  inline CSVImportMessage& operator=(const CSVImportMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVImportMessage& operator=(CSVImportMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVImportMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSVImportMessage* internal_default_instance() {
    return reinterpret_cast<const CSVImportMessage*>(
               &_CSVImportMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CSVImportMessage* other);
  friend void swap(CSVImportMessage& a, CSVImportMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSVImportMessage* New() const final {
    return CreateMaybeMessage<CSVImportMessage>(nullptr);
  }

  CSVImportMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVImportMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVImportMessage& from);
  void MergeFrom(const CSVImportMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVImportMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.CSVImportMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fCSVImportMessage_2eproto);
    return ::descriptor_table_messages_2fCSVImportMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ColmnarDB.NetworkClient.Message.DataType ColumnTypes = 4;
  int columntypes_size() const;
  void clear_columntypes();
  static const int kColumnTypesFieldNumber = 4;
  ::ColmnarDB::NetworkClient::Message::DataType columntypes(int index) const;
  void set_columntypes(int index, ::ColmnarDB::NetworkClient::Message::DataType value);
  void add_columntypes(::ColmnarDB::NetworkClient::Message::DataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& columntypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_columntypes();

  // string DatabaseName = 1;
  void clear_databasename();
  static const int kDatabaseNameFieldNumber = 1;
  const std::string& databasename() const;
  void set_databasename(const std::string& value);
  void set_databasename(std::string&& value);
  void set_databasename(const char* value);
  void set_databasename(const char* value, size_t size);
  std::string* mutable_databasename();
  std::string* release_databasename();
  void set_allocated_databasename(std::string* databasename);

  // string CSVName = 2;
  void clear_csvname();
  static const int kCSVNameFieldNumber = 2;
  const std::string& csvname() const;
  void set_csvname(const std::string& value);
  void set_csvname(std::string&& value);
  void set_csvname(const char* value);
  void set_csvname(const char* value, size_t size);
  std::string* mutable_csvname();
  std::string* release_csvname();
  void set_allocated_csvname(std::string* csvname);

  // string Payload = 3;
  void clear_payload();
  static const int kPayloadFieldNumber = 3;
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.CSVImportMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> columntypes_;
  mutable std::atomic<int> _columntypes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr databasename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csvname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fCSVImportMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSVImportMessage

// string DatabaseName = 1;
inline void CSVImportMessage::clear_databasename() {
  databasename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CSVImportMessage::databasename() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
  return databasename_.GetNoArena();
}
inline void CSVImportMessage::set_databasename(const std::string& value) {
  
  databasename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
}
inline void CSVImportMessage::set_databasename(std::string&& value) {
  
  databasename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
}
inline void CSVImportMessage::set_databasename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  databasename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
}
inline void CSVImportMessage::set_databasename(const char* value, size_t size) {
  
  databasename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
}
inline std::string* CSVImportMessage::mutable_databasename() {
  
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
  return databasename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CSVImportMessage::release_databasename() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
  
  return databasename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CSVImportMessage::set_allocated_databasename(std::string* databasename) {
  if (databasename != nullptr) {
    
  } else {
    
  }
  databasename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), databasename);
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
}

// string CSVName = 2;
inline void CSVImportMessage::clear_csvname() {
  csvname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CSVImportMessage::csvname() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
  return csvname_.GetNoArena();
}
inline void CSVImportMessage::set_csvname(const std::string& value) {
  
  csvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
}
inline void CSVImportMessage::set_csvname(std::string&& value) {
  
  csvname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
}
inline void CSVImportMessage::set_csvname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  csvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
}
inline void CSVImportMessage::set_csvname(const char* value, size_t size) {
  
  csvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
}
inline std::string* CSVImportMessage::mutable_csvname() {
  
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
  return csvname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CSVImportMessage::release_csvname() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
  
  return csvname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CSVImportMessage::set_allocated_csvname(std::string* csvname) {
  if (csvname != nullptr) {
    
  } else {
    
  }
  csvname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), csvname);
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
}

// string Payload = 3;
inline void CSVImportMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CSVImportMessage::payload() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
  return payload_.GetNoArena();
}
inline void CSVImportMessage::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
}
inline void CSVImportMessage::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
}
inline void CSVImportMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
}
inline void CSVImportMessage::set_payload(const char* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
}
inline std::string* CSVImportMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CSVImportMessage::release_payload() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CSVImportMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
}

// repeated .ColmnarDB.NetworkClient.Message.DataType ColumnTypes = 4;
inline int CSVImportMessage::columntypes_size() const {
  return columntypes_.size();
}
inline void CSVImportMessage::clear_columntypes() {
  columntypes_.Clear();
}
inline ::ColmnarDB::NetworkClient::Message::DataType CSVImportMessage::columntypes(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.CSVImportMessage.ColumnTypes)
  return static_cast< ::ColmnarDB::NetworkClient::Message::DataType >(columntypes_.Get(index));
}
inline void CSVImportMessage::set_columntypes(int index, ::ColmnarDB::NetworkClient::Message::DataType value) {
  columntypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.CSVImportMessage.ColumnTypes)
}
inline void CSVImportMessage::add_columntypes(::ColmnarDB::NetworkClient::Message::DataType value) {
  columntypes_.Add(value);
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.CSVImportMessage.ColumnTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CSVImportMessage::columntypes() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.CSVImportMessage.ColumnTypes)
  return columntypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSVImportMessage::mutable_columntypes() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.CSVImportMessage.ColumnTypes)
  return &columntypes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ColmnarDB::NetworkClient::Message::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ColmnarDB::NetworkClient::Message::DataType>() {
  return ::ColmnarDB::NetworkClient::Message::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2fCSVImportMessage_2eproto
