// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InfoMessage.proto

#ifndef PROTOBUF_INCLUDED_InfoMessage_2eproto
#define PROTOBUF_INCLUDED_InfoMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_InfoMessage_2eproto 

namespace protobuf_InfoMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_InfoMessage_2eproto
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {
class InfoMessage;
class InfoMessageDefaultTypeInternal;
extern InfoMessageDefaultTypeInternal _InfoMessage_default_instance_;
}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB
namespace google {
namespace protobuf {
template<> ::ColmnarDB::NetworkClient::Message::InfoMessage* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::InfoMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {

enum InfoMessage_StatusCode {
  InfoMessage_StatusCode_OK = 0,
  InfoMessage_StatusCode_WAIT = 1,
  InfoMessage_StatusCode_GET_NEXT_RESULT = 6,
  InfoMessage_StatusCode_QUERY_ERROR = 2,
  InfoMessage_StatusCode_IMPORT_ERROR = 3,
  InfoMessage_StatusCode_CONN_ESTABLISH = 4,
  InfoMessage_StatusCode_CONN_END = 5,
  InfoMessage_StatusCode_InfoMessage_StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  InfoMessage_StatusCode_InfoMessage_StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool InfoMessage_StatusCode_IsValid(int value);
const InfoMessage_StatusCode InfoMessage_StatusCode_StatusCode_MIN = InfoMessage_StatusCode_OK;
const InfoMessage_StatusCode InfoMessage_StatusCode_StatusCode_MAX = InfoMessage_StatusCode_GET_NEXT_RESULT;
const int InfoMessage_StatusCode_StatusCode_ARRAYSIZE = InfoMessage_StatusCode_StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* InfoMessage_StatusCode_descriptor();
inline const ::std::string& InfoMessage_StatusCode_Name(InfoMessage_StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    InfoMessage_StatusCode_descriptor(), value);
}
inline bool InfoMessage_StatusCode_Parse(
    const ::std::string& name, InfoMessage_StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InfoMessage_StatusCode>(
    InfoMessage_StatusCode_descriptor(), name, value);
}
// ===================================================================

class InfoMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.InfoMessage) */ {
 public:
  InfoMessage();
  virtual ~InfoMessage();

  InfoMessage(const InfoMessage& from);

  inline InfoMessage& operator=(const InfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoMessage(InfoMessage&& from) noexcept
    : InfoMessage() {
    *this = ::std::move(from);
  }

  inline InfoMessage& operator=(InfoMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoMessage* internal_default_instance() {
    return reinterpret_cast<const InfoMessage*>(
               &_InfoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InfoMessage* other);
  friend void swap(InfoMessage& a, InfoMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoMessage* New() const final {
    return CreateMaybeMessage<InfoMessage>(NULL);
  }

  InfoMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoMessage& from);
  void MergeFrom(const InfoMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InfoMessage_StatusCode StatusCode;
  static const StatusCode OK =
    InfoMessage_StatusCode_OK;
  static const StatusCode WAIT =
    InfoMessage_StatusCode_WAIT;
  static const StatusCode GET_NEXT_RESULT =
    InfoMessage_StatusCode_GET_NEXT_RESULT;
  static const StatusCode QUERY_ERROR =
    InfoMessage_StatusCode_QUERY_ERROR;
  static const StatusCode IMPORT_ERROR =
    InfoMessage_StatusCode_IMPORT_ERROR;
  static const StatusCode CONN_ESTABLISH =
    InfoMessage_StatusCode_CONN_ESTABLISH;
  static const StatusCode CONN_END =
    InfoMessage_StatusCode_CONN_END;
  static inline bool StatusCode_IsValid(int value) {
    return InfoMessage_StatusCode_IsValid(value);
  }
  static const StatusCode StatusCode_MIN =
    InfoMessage_StatusCode_StatusCode_MIN;
  static const StatusCode StatusCode_MAX =
    InfoMessage_StatusCode_StatusCode_MAX;
  static const int StatusCode_ARRAYSIZE =
    InfoMessage_StatusCode_StatusCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusCode_descriptor() {
    return InfoMessage_StatusCode_descriptor();
  }
  static inline const ::std::string& StatusCode_Name(StatusCode value) {
    return InfoMessage_StatusCode_Name(value);
  }
  static inline bool StatusCode_Parse(const ::std::string& name,
      StatusCode* value) {
    return InfoMessage_StatusCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .ColmnarDB.NetworkClient.Message.InfoMessage.StatusCode Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::ColmnarDB::NetworkClient::Message::InfoMessage_StatusCode code() const;
  void set_code(::ColmnarDB::NetworkClient::Message::InfoMessage_StatusCode value);

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.InfoMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_InfoMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InfoMessage

// .ColmnarDB.NetworkClient.Message.InfoMessage.StatusCode Code = 1;
inline void InfoMessage::clear_code() {
  code_ = 0;
}
inline ::ColmnarDB::NetworkClient::Message::InfoMessage_StatusCode InfoMessage::code() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.InfoMessage.Code)
  return static_cast< ::ColmnarDB::NetworkClient::Message::InfoMessage_StatusCode >(code_);
}
inline void InfoMessage::set_code(::ColmnarDB::NetworkClient::Message::InfoMessage_StatusCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.InfoMessage.Code)
}

// string Message = 2;
inline void InfoMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoMessage::message() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.InfoMessage.Message)
  return message_.GetNoArena();
}
inline void InfoMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.InfoMessage.Message)
}
#if LANG_CXX11
inline void InfoMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ColmnarDB.NetworkClient.Message.InfoMessage.Message)
}
#endif
inline void InfoMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.InfoMessage.Message)
}
inline void InfoMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.InfoMessage.Message)
}
inline ::std::string* InfoMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.InfoMessage.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoMessage::release_message() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.InfoMessage.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.InfoMessage.Message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ColmnarDB::NetworkClient::Message::InfoMessage_StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ColmnarDB::NetworkClient::Message::InfoMessage_StatusCode>() {
  return ::ColmnarDB::NetworkClient::Message::InfoMessage_StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_InfoMessage_2eproto
