// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSVImportMessage.proto

#include "CSVImportMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ColmnarDB {
namespace NetworkClient {
namespace Message {
class CSVImportMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVImportMessage>
      _instance;
} _CSVImportMessage_default_instance_;
}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB
namespace protobuf_CSVImportMessage_2eproto {
static void InitDefaultsCSVImportMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_CSVImportMessage_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::CSVImportMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::CSVImportMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSVImportMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSVImportMessage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CSVImportMessage.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::CSVImportMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::CSVImportMessage, databasename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::CSVImportMessage, csvname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::CSVImportMessage, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::CSVImportMessage, columntypes_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ColmnarDB::NetworkClient::Message::CSVImportMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ColmnarDB::NetworkClient::Message::_CSVImportMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "CSVImportMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026CSVImportMessage.proto\022\037ColmnarDB.Netw"
      "orkClient.Message\"\212\001\n\020CSVImportMessage\022\024"
      "\n\014DatabaseName\030\001 \001(\t\022\017\n\007CSVName\030\002 \001(\t\022\017\n"
      "\007Payload\030\003 \001(\t\022>\n\013ColumnTypes\030\004 \003(\0162).Co"
      "lmnarDB.NetworkClient.Message.DataType*\324"
      "\002\n\010DataType\022\r\n\tCONST_INT\020\000\022\030\n\013CONST_ERRO"
      "R\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nCONST_LONG\020\001\022\017\n\013CONST_FL"
      "OAT\020\002\022\020\n\014CONST_DOUBLE\020\003\022\017\n\013CONST_POINT\020\004"
      "\022\021\n\rCONST_POLYGON\020\005\022\020\n\014CONST_STRING\020\006\022\020\n"
      "\014CONST_INT8_T\020\007\022\016\n\nCOLUMN_INT\020\010\022\017\n\013COLUM"
      "N_LONG\020\t\022\020\n\014COLUMN_FLOAT\020\n\022\021\n\rCOLUMN_DOU"
      "BLE\020\013\022\020\n\014COLUMN_POINT\020\014\022\022\n\016COLUMN_POLYGO"
      "N\020\r\022\021\n\rCOLUMN_STRING\020\016\022\021\n\rCOLUMN_INT8_T\020"
      "\017\022\022\n\016DATA_TYPE_SIZE\020\020b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 549);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSVImportMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_CSVImportMessage_2eproto
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_CSVImportMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CSVImportMessage_2eproto::file_level_enum_descriptors[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CSVImportMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVImportMessage::kDatabaseNameFieldNumber;
const int CSVImportMessage::kCSVNameFieldNumber;
const int CSVImportMessage::kPayloadFieldNumber;
const int CSVImportMessage::kColumnTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVImportMessage::CSVImportMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_CSVImportMessage_2eproto::scc_info_CSVImportMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.CSVImportMessage)
}
CSVImportMessage::CSVImportMessage(const CSVImportMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columntypes_(from.columntypes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  databasename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.databasename().size() > 0) {
    databasename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.databasename_);
  }
  csvname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.csvname().size() > 0) {
    csvname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csvname_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.CSVImportMessage)
}

void CSVImportMessage::SharedCtor() {
  databasename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csvname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSVImportMessage::~CSVImportMessage() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  SharedDtor();
}

void CSVImportMessage::SharedDtor() {
  databasename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csvname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVImportMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSVImportMessage::descriptor() {
  ::protobuf_CSVImportMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_CSVImportMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVImportMessage& CSVImportMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_CSVImportMessage_2eproto::scc_info_CSVImportMessage.base);
  return *internal_default_instance();
}


void CSVImportMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columntypes_.Clear();
  databasename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csvname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CSVImportMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string DatabaseName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_databasename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->databasename().data(), static_cast<int>(this->databasename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CSVName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_csvname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->csvname().data(), static_cast<int>(this->csvname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payload().data(), static_cast<int>(this->payload().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ColmnarDB.NetworkClient.Message.DataType ColumnTypes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_columntypes(static_cast< ::ColmnarDB::NetworkClient::Message::DataType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_columntypes(static_cast< ::ColmnarDB::NetworkClient::Message::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  return false;
#undef DO_
}

void CSVImportMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string DatabaseName = 1;
  if (this->databasename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->databasename().data(), static_cast<int>(this->databasename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->databasename(), output);
  }

  // string CSVName = 2;
  if (this->csvname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csvname().data(), static_cast<int>(this->csvname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->csvname(), output);
  }

  // string Payload = 3;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->payload(), output);
  }

  // repeated .ColmnarDB.NetworkClient.Message.DataType ColumnTypes = 4;
  if (this->columntypes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_columntypes_cached_byte_size_));
  }
  for (int i = 0, n = this->columntypes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->columntypes(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ColmnarDB.NetworkClient.Message.CSVImportMessage)
}

::google::protobuf::uint8* CSVImportMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string DatabaseName = 1;
  if (this->databasename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->databasename().data(), static_cast<int>(this->databasename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->databasename(), target);
  }

  // string CSVName = 2;
  if (this->csvname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csvname().data(), static_cast<int>(this->csvname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->csvname(), target);
  }

  // string Payload = 3;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->payload(), target);
  }

  // repeated .ColmnarDB.NetworkClient.Message.DataType ColumnTypes = 4;
  if (this->columntypes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _columntypes_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->columntypes_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  return target;
}

size_t CSVImportMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ColmnarDB.NetworkClient.Message.DataType ColumnTypes = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->columntypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->columntypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _columntypes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string DatabaseName = 1;
  if (this->databasename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->databasename());
  }

  // string CSVName = 2;
  if (this->csvname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->csvname());
  }

  // string Payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSVImportMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVImportMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVImportMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.CSVImportMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.CSVImportMessage)
    MergeFrom(*source);
  }
}

void CSVImportMessage::MergeFrom(const CSVImportMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columntypes_.MergeFrom(from.columntypes_);
  if (from.databasename().size() > 0) {

    databasename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.databasename_);
  }
  if (from.csvname().size() > 0) {

    csvname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csvname_);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void CSVImportMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVImportMessage::CopyFrom(const CSVImportMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.CSVImportMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVImportMessage::IsInitialized() const {
  return true;
}

void CSVImportMessage::Swap(CSVImportMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVImportMessage::InternalSwap(CSVImportMessage* other) {
  using std::swap;
  columntypes_.InternalSwap(&other->columntypes_);
  databasename_.Swap(&other->databasename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  csvname_.Swap(&other->csvname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSVImportMessage::GetMetadata() const {
  protobuf_CSVImportMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_CSVImportMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ColmnarDB::NetworkClient::Message::CSVImportMessage* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::CSVImportMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::CSVImportMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
