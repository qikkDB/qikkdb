// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/BulkImportMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2fBulkImportMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2fBulkImportMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "messages/CSVImportMessage.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2fBulkImportMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2fBulkImportMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2fBulkImportMessage_2eproto;
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {
class BulkImportMessage;
class BulkImportMessageDefaultTypeInternal;
extern BulkImportMessageDefaultTypeInternal _BulkImportMessage_default_instance_;
}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB
PROTOBUF_NAMESPACE_OPEN
template<> ::ColmnarDB::NetworkClient::Message::BulkImportMessage* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::BulkImportMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {

// ===================================================================

class BulkImportMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.BulkImportMessage) */ {
 public:
  BulkImportMessage();
  virtual ~BulkImportMessage();

  BulkImportMessage(const BulkImportMessage& from);
  BulkImportMessage(BulkImportMessage&& from) noexcept
    : BulkImportMessage() {
    *this = ::std::move(from);
  }

  inline BulkImportMessage& operator=(const BulkImportMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkImportMessage& operator=(BulkImportMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkImportMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkImportMessage* internal_default_instance() {
    return reinterpret_cast<const BulkImportMessage*>(
               &_BulkImportMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BulkImportMessage* other);
  friend void swap(BulkImportMessage& a, BulkImportMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulkImportMessage* New() const final {
    return CreateMaybeMessage<BulkImportMessage>(nullptr);
  }

  BulkImportMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkImportMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkImportMessage& from);
  void MergeFrom(const BulkImportMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkImportMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.BulkImportMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fBulkImportMessage_2eproto);
    return ::descriptor_table_messages_2fBulkImportMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string TableName = 1;
  void clear_tablename();
  static const int kTableNameFieldNumber = 1;
  const std::string& tablename() const;
  void set_tablename(const std::string& value);
  void set_tablename(std::string&& value);
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  std::string* mutable_tablename();
  std::string* release_tablename();
  void set_allocated_tablename(std::string* tablename);

  // string ColumnName = 2;
  void clear_columnname();
  static const int kColumnNameFieldNumber = 2;
  const std::string& columnname() const;
  void set_columnname(const std::string& value);
  void set_columnname(std::string&& value);
  void set_columnname(const char* value);
  void set_columnname(const char* value, size_t size);
  std::string* mutable_columnname();
  std::string* release_columnname();
  void set_allocated_columnname(std::string* columnname);

  // .ColmnarDB.NetworkClient.Message.DataType ColumnType = 3;
  void clear_columntype();
  static const int kColumnTypeFieldNumber = 3;
  ::ColmnarDB::NetworkClient::Message::DataType columntype() const;
  void set_columntype(::ColmnarDB::NetworkClient::Message::DataType value);

  // int32 ElemCount = 4;
  void clear_elemcount();
  static const int kElemCountFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 elemcount() const;
  void set_elemcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 nullMaskLen = 5;
  void clear_nullmasklen();
  static const int kNullMaskLenFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 nullmasklen() const;
  void set_nullmasklen(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.BulkImportMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tablename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr columnname_;
  int columntype_;
  ::PROTOBUF_NAMESPACE_ID::int32 elemcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 nullmasklen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fBulkImportMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BulkImportMessage

// string TableName = 1;
inline void BulkImportMessage::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BulkImportMessage::tablename() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.BulkImportMessage.TableName)
  return tablename_.GetNoArena();
}
inline void BulkImportMessage::set_tablename(const std::string& value) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.BulkImportMessage.TableName)
}
inline void BulkImportMessage::set_tablename(std::string&& value) {
  
  tablename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ColmnarDB.NetworkClient.Message.BulkImportMessage.TableName)
}
inline void BulkImportMessage::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.BulkImportMessage.TableName)
}
inline void BulkImportMessage::set_tablename(const char* value, size_t size) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.BulkImportMessage.TableName)
}
inline std::string* BulkImportMessage::mutable_tablename() {
  
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.BulkImportMessage.TableName)
  return tablename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BulkImportMessage::release_tablename() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.BulkImportMessage.TableName)
  
  return tablename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BulkImportMessage::set_allocated_tablename(std::string* tablename) {
  if (tablename != nullptr) {
    
  } else {
    
  }
  tablename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.BulkImportMessage.TableName)
}

// string ColumnName = 2;
inline void BulkImportMessage::clear_columnname() {
  columnname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BulkImportMessage::columnname() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.BulkImportMessage.ColumnName)
  return columnname_.GetNoArena();
}
inline void BulkImportMessage::set_columnname(const std::string& value) {
  
  columnname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.BulkImportMessage.ColumnName)
}
inline void BulkImportMessage::set_columnname(std::string&& value) {
  
  columnname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ColmnarDB.NetworkClient.Message.BulkImportMessage.ColumnName)
}
inline void BulkImportMessage::set_columnname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  columnname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.BulkImportMessage.ColumnName)
}
inline void BulkImportMessage::set_columnname(const char* value, size_t size) {
  
  columnname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.BulkImportMessage.ColumnName)
}
inline std::string* BulkImportMessage::mutable_columnname() {
  
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.BulkImportMessage.ColumnName)
  return columnname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BulkImportMessage::release_columnname() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.BulkImportMessage.ColumnName)
  
  return columnname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BulkImportMessage::set_allocated_columnname(std::string* columnname) {
  if (columnname != nullptr) {
    
  } else {
    
  }
  columnname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), columnname);
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.BulkImportMessage.ColumnName)
}

// .ColmnarDB.NetworkClient.Message.DataType ColumnType = 3;
inline void BulkImportMessage::clear_columntype() {
  columntype_ = 0;
}
inline ::ColmnarDB::NetworkClient::Message::DataType BulkImportMessage::columntype() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.BulkImportMessage.ColumnType)
  return static_cast< ::ColmnarDB::NetworkClient::Message::DataType >(columntype_);
}
inline void BulkImportMessage::set_columntype(::ColmnarDB::NetworkClient::Message::DataType value) {
  
  columntype_ = value;
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.BulkImportMessage.ColumnType)
}

// int32 ElemCount = 4;
inline void BulkImportMessage::clear_elemcount() {
  elemcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkImportMessage::elemcount() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.BulkImportMessage.ElemCount)
  return elemcount_;
}
inline void BulkImportMessage::set_elemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  elemcount_ = value;
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.BulkImportMessage.ElemCount)
}

// int32 nullMaskLen = 5;
inline void BulkImportMessage::clear_nullmasklen() {
  nullmasklen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BulkImportMessage::nullmasklen() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.BulkImportMessage.nullMaskLen)
  return nullmasklen_;
}
inline void BulkImportMessage::set_nullmasklen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nullmasklen_ = value;
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.BulkImportMessage.nullMaskLen)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2fBulkImportMessage_2eproto
