// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSVImportMessage.proto

#ifndef PROTOBUF_INCLUDED_CSVImportMessage_2eproto
#define PROTOBUF_INCLUDED_CSVImportMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_CSVImportMessage_2eproto 

namespace protobuf_CSVImportMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_CSVImportMessage_2eproto
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {
class CSVImportMessage;
class CSVImportMessageDefaultTypeInternal;
extern CSVImportMessageDefaultTypeInternal _CSVImportMessage_default_instance_;
}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB
namespace google {
namespace protobuf {
template<> ::ColmnarDB::NetworkClient::Message::CSVImportMessage* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::CSVImportMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {

// ===================================================================

class CSVImportMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.CSVImportMessage) */ {
 public:
  CSVImportMessage();
  virtual ~CSVImportMessage();

  CSVImportMessage(const CSVImportMessage& from);

  inline CSVImportMessage& operator=(const CSVImportMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSVImportMessage(CSVImportMessage&& from) noexcept
    : CSVImportMessage() {
    *this = ::std::move(from);
  }

  inline CSVImportMessage& operator=(CSVImportMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSVImportMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSVImportMessage* internal_default_instance() {
    return reinterpret_cast<const CSVImportMessage*>(
               &_CSVImportMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CSVImportMessage* other);
  friend void swap(CSVImportMessage& a, CSVImportMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSVImportMessage* New() const final {
    return CreateMaybeMessage<CSVImportMessage>(NULL);
  }

  CSVImportMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSVImportMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSVImportMessage& from);
  void MergeFrom(const CSVImportMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVImportMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DatabaseName = 1;
  void clear_databasename();
  static const int kDatabaseNameFieldNumber = 1;
  const ::std::string& databasename() const;
  void set_databasename(const ::std::string& value);
  #if LANG_CXX11
  void set_databasename(::std::string&& value);
  #endif
  void set_databasename(const char* value);
  void set_databasename(const char* value, size_t size);
  ::std::string* mutable_databasename();
  ::std::string* release_databasename();
  void set_allocated_databasename(::std::string* databasename);

  // string CSVName = 2;
  void clear_csvname();
  static const int kCSVNameFieldNumber = 2;
  const ::std::string& csvname() const;
  void set_csvname(const ::std::string& value);
  #if LANG_CXX11
  void set_csvname(::std::string&& value);
  #endif
  void set_csvname(const char* value);
  void set_csvname(const char* value, size_t size);
  ::std::string* mutable_csvname();
  ::std::string* release_csvname();
  void set_allocated_csvname(::std::string* csvname);

  // string Payload = 3;
  void clear_payload();
  static const int kPayloadFieldNumber = 3;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.CSVImportMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr databasename_;
  ::google::protobuf::internal::ArenaStringPtr csvname_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_CSVImportMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSVImportMessage

// string DatabaseName = 1;
inline void CSVImportMessage::clear_databasename() {
  databasename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CSVImportMessage::databasename() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
  return databasename_.GetNoArena();
}
inline void CSVImportMessage::set_databasename(const ::std::string& value) {
  
  databasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
}
#if LANG_CXX11
inline void CSVImportMessage::set_databasename(::std::string&& value) {
  
  databasename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
}
#endif
inline void CSVImportMessage::set_databasename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  databasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
}
inline void CSVImportMessage::set_databasename(const char* value, size_t size) {
  
  databasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
}
inline ::std::string* CSVImportMessage::mutable_databasename() {
  
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
  return databasename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSVImportMessage::release_databasename() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
  
  return databasename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSVImportMessage::set_allocated_databasename(::std::string* databasename) {
  if (databasename != NULL) {
    
  } else {
    
  }
  databasename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), databasename);
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.CSVImportMessage.DatabaseName)
}

// string CSVName = 2;
inline void CSVImportMessage::clear_csvname() {
  csvname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CSVImportMessage::csvname() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
  return csvname_.GetNoArena();
}
inline void CSVImportMessage::set_csvname(const ::std::string& value) {
  
  csvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
}
#if LANG_CXX11
inline void CSVImportMessage::set_csvname(::std::string&& value) {
  
  csvname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
}
#endif
inline void CSVImportMessage::set_csvname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  csvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
}
inline void CSVImportMessage::set_csvname(const char* value, size_t size) {
  
  csvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
}
inline ::std::string* CSVImportMessage::mutable_csvname() {
  
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
  return csvname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSVImportMessage::release_csvname() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
  
  return csvname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSVImportMessage::set_allocated_csvname(::std::string* csvname) {
  if (csvname != NULL) {
    
  } else {
    
  }
  csvname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csvname);
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.CSVImportMessage.CSVName)
}

// string Payload = 3;
inline void CSVImportMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CSVImportMessage::payload() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
  return payload_.GetNoArena();
}
inline void CSVImportMessage::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
}
#if LANG_CXX11
inline void CSVImportMessage::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
}
#endif
inline void CSVImportMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
}
inline void CSVImportMessage::set_payload(const char* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
}
inline ::std::string* CSVImportMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSVImportMessage::release_payload() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSVImportMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.CSVImportMessage.Payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_CSVImportMessage_2eproto
