// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/QueryResponseMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2fQueryResponseMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2fQueryResponseMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "Types/ComplexPolygon.pb.h"
#include "Types/Point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2fQueryResponseMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2fQueryResponseMessage_2eproto;
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {
class QueryNullmaskPayload;
class QueryNullmaskPayloadDefaultTypeInternal;
extern QueryNullmaskPayloadDefaultTypeInternal _QueryNullmaskPayload_default_instance_;
class QueryResponseDateTimePayload;
class QueryResponseDateTimePayloadDefaultTypeInternal;
extern QueryResponseDateTimePayloadDefaultTypeInternal _QueryResponseDateTimePayload_default_instance_;
class QueryResponseDoublePayload;
class QueryResponseDoublePayloadDefaultTypeInternal;
extern QueryResponseDoublePayloadDefaultTypeInternal _QueryResponseDoublePayload_default_instance_;
class QueryResponseFloatPayload;
class QueryResponseFloatPayloadDefaultTypeInternal;
extern QueryResponseFloatPayloadDefaultTypeInternal _QueryResponseFloatPayload_default_instance_;
class QueryResponseInt64Payload;
class QueryResponseInt64PayloadDefaultTypeInternal;
extern QueryResponseInt64PayloadDefaultTypeInternal _QueryResponseInt64Payload_default_instance_;
class QueryResponseIntPayload;
class QueryResponseIntPayloadDefaultTypeInternal;
extern QueryResponseIntPayloadDefaultTypeInternal _QueryResponseIntPayload_default_instance_;
class QueryResponseMessage;
class QueryResponseMessageDefaultTypeInternal;
extern QueryResponseMessageDefaultTypeInternal _QueryResponseMessage_default_instance_;
class QueryResponseMessage_NullBitMasksEntry_DoNotUse;
class QueryResponseMessage_NullBitMasksEntry_DoNotUseDefaultTypeInternal;
extern QueryResponseMessage_NullBitMasksEntry_DoNotUseDefaultTypeInternal _QueryResponseMessage_NullBitMasksEntry_DoNotUse_default_instance_;
class QueryResponseMessage_PayloadsEntry_DoNotUse;
class QueryResponseMessage_PayloadsEntry_DoNotUseDefaultTypeInternal;
extern QueryResponseMessage_PayloadsEntry_DoNotUseDefaultTypeInternal _QueryResponseMessage_PayloadsEntry_DoNotUse_default_instance_;
class QueryResponseMessage_TimingEntry_DoNotUse;
class QueryResponseMessage_TimingEntry_DoNotUseDefaultTypeInternal;
extern QueryResponseMessage_TimingEntry_DoNotUseDefaultTypeInternal _QueryResponseMessage_TimingEntry_DoNotUse_default_instance_;
class QueryResponsePayload;
class QueryResponsePayloadDefaultTypeInternal;
extern QueryResponsePayloadDefaultTypeInternal _QueryResponsePayload_default_instance_;
class QueryResponsePointPayload;
class QueryResponsePointPayloadDefaultTypeInternal;
extern QueryResponsePointPayloadDefaultTypeInternal _QueryResponsePointPayload_default_instance_;
class QueryResponsePolygonPayload;
class QueryResponsePolygonPayloadDefaultTypeInternal;
extern QueryResponsePolygonPayloadDefaultTypeInternal _QueryResponsePolygonPayload_default_instance_;
class QueryResponseStringPayload;
class QueryResponseStringPayloadDefaultTypeInternal;
extern QueryResponseStringPayloadDefaultTypeInternal _QueryResponseStringPayload_default_instance_;
}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB
PROTOBUF_NAMESPACE_OPEN
template<> ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponseMessage* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponseMessage>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponsePayload* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponsePayload>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload>(Arena*);
template<> ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* Arena::CreateMaybeMessage<::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {

// ===================================================================

class QueryResponseIntPayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload) */ {
 public:
  QueryResponseIntPayload();
  virtual ~QueryResponseIntPayload();

  QueryResponseIntPayload(const QueryResponseIntPayload& from);
  QueryResponseIntPayload(QueryResponseIntPayload&& from) noexcept
    : QueryResponseIntPayload() {
    *this = ::std::move(from);
  }

  inline QueryResponseIntPayload& operator=(const QueryResponseIntPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponseIntPayload& operator=(QueryResponseIntPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponseIntPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponseIntPayload* internal_default_instance() {
    return reinterpret_cast<const QueryResponseIntPayload*>(
               &_QueryResponseIntPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryResponseIntPayload& a, QueryResponseIntPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponseIntPayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponseIntPayload* New() const final {
    return CreateMaybeMessage<QueryResponseIntPayload>(nullptr);
  }

  QueryResponseIntPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponseIntPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponseIntPayload& from);
  void MergeFrom(const QueryResponseIntPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponseIntPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryResponseIntPayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntDataFieldNumber = 1,
  };
  // repeated int32 intData = 1;
  int intdata_size() const;
  private:
  int _internal_intdata_size() const;
  public:
  void clear_intdata();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intdata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_intdata() const;
  void _internal_add_intdata(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_intdata();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 intdata(int index) const;
  void set_intdata(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_intdata(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      intdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_intdata();

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > intdata_;
  mutable std::atomic<int> _intdata_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryResponseInt64Payload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload) */ {
 public:
  QueryResponseInt64Payload();
  virtual ~QueryResponseInt64Payload();

  QueryResponseInt64Payload(const QueryResponseInt64Payload& from);
  QueryResponseInt64Payload(QueryResponseInt64Payload&& from) noexcept
    : QueryResponseInt64Payload() {
    *this = ::std::move(from);
  }

  inline QueryResponseInt64Payload& operator=(const QueryResponseInt64Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponseInt64Payload& operator=(QueryResponseInt64Payload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponseInt64Payload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponseInt64Payload* internal_default_instance() {
    return reinterpret_cast<const QueryResponseInt64Payload*>(
               &_QueryResponseInt64Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryResponseInt64Payload& a, QueryResponseInt64Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponseInt64Payload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponseInt64Payload* New() const final {
    return CreateMaybeMessage<QueryResponseInt64Payload>(nullptr);
  }

  QueryResponseInt64Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponseInt64Payload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponseInt64Payload& from);
  void MergeFrom(const QueryResponseInt64Payload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponseInt64Payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt64DataFieldNumber = 1,
  };
  // repeated int64 int64Data = 1;
  int int64data_size() const;
  private:
  int _internal_int64data_size() const;
  public:
  void clear_int64data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int64data() const;
  void _internal_add_int64data(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int64data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int64data(int index) const;
  void set_int64data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int64data(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int64data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int64data();

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int64data_;
  mutable std::atomic<int> _int64data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryResponseDateTimePayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload) */ {
 public:
  QueryResponseDateTimePayload();
  virtual ~QueryResponseDateTimePayload();

  QueryResponseDateTimePayload(const QueryResponseDateTimePayload& from);
  QueryResponseDateTimePayload(QueryResponseDateTimePayload&& from) noexcept
    : QueryResponseDateTimePayload() {
    *this = ::std::move(from);
  }

  inline QueryResponseDateTimePayload& operator=(const QueryResponseDateTimePayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponseDateTimePayload& operator=(QueryResponseDateTimePayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponseDateTimePayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponseDateTimePayload* internal_default_instance() {
    return reinterpret_cast<const QueryResponseDateTimePayload*>(
               &_QueryResponseDateTimePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryResponseDateTimePayload& a, QueryResponseDateTimePayload& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponseDateTimePayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponseDateTimePayload* New() const final {
    return CreateMaybeMessage<QueryResponseDateTimePayload>(nullptr);
  }

  QueryResponseDateTimePayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponseDateTimePayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponseDateTimePayload& from);
  void MergeFrom(const QueryResponseDateTimePayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponseDateTimePayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateTimeDataFieldNumber = 1,
  };
  // repeated int64 dateTimeData = 1;
  int datetimedata_size() const;
  private:
  int _internal_datetimedata_size() const;
  public:
  void clear_datetimedata();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_datetimedata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_datetimedata() const;
  void _internal_add_datetimedata(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_datetimedata();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 datetimedata(int index) const;
  void set_datetimedata(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_datetimedata(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      datetimedata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_datetimedata();

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > datetimedata_;
  mutable std::atomic<int> _datetimedata_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryResponseFloatPayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload) */ {
 public:
  QueryResponseFloatPayload();
  virtual ~QueryResponseFloatPayload();

  QueryResponseFloatPayload(const QueryResponseFloatPayload& from);
  QueryResponseFloatPayload(QueryResponseFloatPayload&& from) noexcept
    : QueryResponseFloatPayload() {
    *this = ::std::move(from);
  }

  inline QueryResponseFloatPayload& operator=(const QueryResponseFloatPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponseFloatPayload& operator=(QueryResponseFloatPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponseFloatPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponseFloatPayload* internal_default_instance() {
    return reinterpret_cast<const QueryResponseFloatPayload*>(
               &_QueryResponseFloatPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryResponseFloatPayload& a, QueryResponseFloatPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponseFloatPayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponseFloatPayload* New() const final {
    return CreateMaybeMessage<QueryResponseFloatPayload>(nullptr);
  }

  QueryResponseFloatPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponseFloatPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponseFloatPayload& from);
  void MergeFrom(const QueryResponseFloatPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponseFloatPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatDataFieldNumber = 1,
  };
  // repeated float floatData = 1;
  int floatdata_size() const;
  private:
  int _internal_floatdata_size() const;
  public:
  void clear_floatdata();
  private:
  float _internal_floatdata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floatdata() const;
  void _internal_add_floatdata(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floatdata();
  public:
  float floatdata(int index) const;
  void set_floatdata(int index, float value);
  void add_floatdata(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floatdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floatdata();

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floatdata_;
  mutable std::atomic<int> _floatdata_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryResponseDoublePayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload) */ {
 public:
  QueryResponseDoublePayload();
  virtual ~QueryResponseDoublePayload();

  QueryResponseDoublePayload(const QueryResponseDoublePayload& from);
  QueryResponseDoublePayload(QueryResponseDoublePayload&& from) noexcept
    : QueryResponseDoublePayload() {
    *this = ::std::move(from);
  }

  inline QueryResponseDoublePayload& operator=(const QueryResponseDoublePayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponseDoublePayload& operator=(QueryResponseDoublePayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponseDoublePayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponseDoublePayload* internal_default_instance() {
    return reinterpret_cast<const QueryResponseDoublePayload*>(
               &_QueryResponseDoublePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryResponseDoublePayload& a, QueryResponseDoublePayload& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponseDoublePayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponseDoublePayload* New() const final {
    return CreateMaybeMessage<QueryResponseDoublePayload>(nullptr);
  }

  QueryResponseDoublePayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponseDoublePayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponseDoublePayload& from);
  void MergeFrom(const QueryResponseDoublePayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponseDoublePayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleDataFieldNumber = 1,
  };
  // repeated double doubleData = 1;
  int doubledata_size() const;
  private:
  int _internal_doubledata_size() const;
  public:
  void clear_doubledata();
  private:
  double _internal_doubledata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_doubledata() const;
  void _internal_add_doubledata(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_doubledata();
  public:
  double doubledata(int index) const;
  void set_doubledata(int index, double value);
  void add_doubledata(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      doubledata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_doubledata();

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > doubledata_;
  mutable std::atomic<int> _doubledata_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryResponsePolygonPayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload) */ {
 public:
  QueryResponsePolygonPayload();
  virtual ~QueryResponsePolygonPayload();

  QueryResponsePolygonPayload(const QueryResponsePolygonPayload& from);
  QueryResponsePolygonPayload(QueryResponsePolygonPayload&& from) noexcept
    : QueryResponsePolygonPayload() {
    *this = ::std::move(from);
  }

  inline QueryResponsePolygonPayload& operator=(const QueryResponsePolygonPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponsePolygonPayload& operator=(QueryResponsePolygonPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponsePolygonPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponsePolygonPayload* internal_default_instance() {
    return reinterpret_cast<const QueryResponsePolygonPayload*>(
               &_QueryResponsePolygonPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryResponsePolygonPayload& a, QueryResponsePolygonPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponsePolygonPayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponsePolygonPayload* New() const final {
    return CreateMaybeMessage<QueryResponsePolygonPayload>(nullptr);
  }

  QueryResponsePolygonPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponsePolygonPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponsePolygonPayload& from);
  void MergeFrom(const QueryResponsePolygonPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponsePolygonPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonDataFieldNumber = 1,
  };
  // repeated .ColmnarDB.Types.ComplexPolygon polygonData = 1;
  int polygondata_size() const;
  private:
  int _internal_polygondata_size() const;
  public:
  void clear_polygondata();
  ::ColmnarDB::Types::ComplexPolygon* mutable_polygondata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColmnarDB::Types::ComplexPolygon >*
      mutable_polygondata();
  private:
  const ::ColmnarDB::Types::ComplexPolygon& _internal_polygondata(int index) const;
  ::ColmnarDB::Types::ComplexPolygon* _internal_add_polygondata();
  public:
  const ::ColmnarDB::Types::ComplexPolygon& polygondata(int index) const;
  ::ColmnarDB::Types::ComplexPolygon* add_polygondata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColmnarDB::Types::ComplexPolygon >&
      polygondata() const;

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColmnarDB::Types::ComplexPolygon > polygondata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryResponsePointPayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload) */ {
 public:
  QueryResponsePointPayload();
  virtual ~QueryResponsePointPayload();

  QueryResponsePointPayload(const QueryResponsePointPayload& from);
  QueryResponsePointPayload(QueryResponsePointPayload&& from) noexcept
    : QueryResponsePointPayload() {
    *this = ::std::move(from);
  }

  inline QueryResponsePointPayload& operator=(const QueryResponsePointPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponsePointPayload& operator=(QueryResponsePointPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponsePointPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponsePointPayload* internal_default_instance() {
    return reinterpret_cast<const QueryResponsePointPayload*>(
               &_QueryResponsePointPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryResponsePointPayload& a, QueryResponsePointPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponsePointPayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponsePointPayload* New() const final {
    return CreateMaybeMessage<QueryResponsePointPayload>(nullptr);
  }

  QueryResponsePointPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponsePointPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponsePointPayload& from);
  void MergeFrom(const QueryResponsePointPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponsePointPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryResponsePointPayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointDataFieldNumber = 1,
  };
  // repeated .ColmnarDB.Types.Point pointData = 1;
  int pointdata_size() const;
  private:
  int _internal_pointdata_size() const;
  public:
  void clear_pointdata();
  ::ColmnarDB::Types::Point* mutable_pointdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColmnarDB::Types::Point >*
      mutable_pointdata();
  private:
  const ::ColmnarDB::Types::Point& _internal_pointdata(int index) const;
  ::ColmnarDB::Types::Point* _internal_add_pointdata();
  public:
  const ::ColmnarDB::Types::Point& pointdata(int index) const;
  ::ColmnarDB::Types::Point* add_pointdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColmnarDB::Types::Point >&
      pointdata() const;

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColmnarDB::Types::Point > pointdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryResponseStringPayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload) */ {
 public:
  QueryResponseStringPayload();
  virtual ~QueryResponseStringPayload();

  QueryResponseStringPayload(const QueryResponseStringPayload& from);
  QueryResponseStringPayload(QueryResponseStringPayload&& from) noexcept
    : QueryResponseStringPayload() {
    *this = ::std::move(from);
  }

  inline QueryResponseStringPayload& operator=(const QueryResponseStringPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponseStringPayload& operator=(QueryResponseStringPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponseStringPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponseStringPayload* internal_default_instance() {
    return reinterpret_cast<const QueryResponseStringPayload*>(
               &_QueryResponseStringPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryResponseStringPayload& a, QueryResponseStringPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponseStringPayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponseStringPayload* New() const final {
    return CreateMaybeMessage<QueryResponseStringPayload>(nullptr);
  }

  QueryResponseStringPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponseStringPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponseStringPayload& from);
  void MergeFrom(const QueryResponseStringPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponseStringPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryResponseStringPayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringDataFieldNumber = 1,
  };
  // repeated string stringData = 1;
  int stringdata_size() const;
  private:
  int _internal_stringdata_size() const;
  public:
  void clear_stringdata();
  const std::string& stringdata(int index) const;
  std::string* mutable_stringdata(int index);
  void set_stringdata(int index, const std::string& value);
  void set_stringdata(int index, std::string&& value);
  void set_stringdata(int index, const char* value);
  void set_stringdata(int index, const char* value, size_t size);
  std::string* add_stringdata();
  void add_stringdata(const std::string& value);
  void add_stringdata(std::string&& value);
  void add_stringdata(const char* value);
  void add_stringdata(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stringdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stringdata();
  private:
  const std::string& _internal_stringdata(int index) const;
  std::string* _internal_add_stringdata();
  public:

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stringdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryNullmaskPayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload) */ {
 public:
  QueryNullmaskPayload();
  virtual ~QueryNullmaskPayload();

  QueryNullmaskPayload(const QueryNullmaskPayload& from);
  QueryNullmaskPayload(QueryNullmaskPayload&& from) noexcept
    : QueryNullmaskPayload() {
    *this = ::std::move(from);
  }

  inline QueryNullmaskPayload& operator=(const QueryNullmaskPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNullmaskPayload& operator=(QueryNullmaskPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryNullmaskPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryNullmaskPayload* internal_default_instance() {
    return reinterpret_cast<const QueryNullmaskPayload*>(
               &_QueryNullmaskPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryNullmaskPayload& a, QueryNullmaskPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryNullmaskPayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryNullmaskPayload* New() const final {
    return CreateMaybeMessage<QueryNullmaskPayload>(nullptr);
  }

  QueryNullmaskPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryNullmaskPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryNullmaskPayload& from);
  void MergeFrom(const QueryNullmaskPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNullmaskPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryNullmaskPayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullMaskFieldNumber = 1,
  };
  // repeated uint32 nullMask = 1;
  int nullmask_size() const;
  private:
  int _internal_nullmask_size() const;
  public:
  void clear_nullmask();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nullmask(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_nullmask() const;
  void _internal_add_nullmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_nullmask();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 nullmask(int index) const;
  void set_nullmask(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_nullmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      nullmask() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_nullmask();

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > nullmask_;
  mutable std::atomic<int> _nullmask_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryResponsePayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryResponsePayload) */ {
 public:
  QueryResponsePayload();
  virtual ~QueryResponsePayload();

  QueryResponsePayload(const QueryResponsePayload& from);
  QueryResponsePayload(QueryResponsePayload&& from) noexcept
    : QueryResponsePayload() {
    *this = ::std::move(from);
  }

  inline QueryResponsePayload& operator=(const QueryResponsePayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponsePayload& operator=(QueryResponsePayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponsePayload& default_instance();

  enum PayloadCase {
    kIntPayload = 2,
    kFloatPayload = 3,
    kInt64Payload = 4,
    kDoublePayload = 5,
    kPointPayload = 6,
    kPolygonPayload = 7,
    kStringPayload = 8,
    kDateTimePayload = 9,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponsePayload* internal_default_instance() {
    return reinterpret_cast<const QueryResponsePayload*>(
               &_QueryResponsePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryResponsePayload& a, QueryResponsePayload& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponsePayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponsePayload* New() const final {
    return CreateMaybeMessage<QueryResponsePayload>(nullptr);
  }

  QueryResponsePayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponsePayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponsePayload& from);
  void MergeFrom(const QueryResponsePayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponsePayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryResponsePayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntPayloadFieldNumber = 2,
    kFloatPayloadFieldNumber = 3,
    kInt64PayloadFieldNumber = 4,
    kDoublePayloadFieldNumber = 5,
    kPointPayloadFieldNumber = 6,
    kPolygonPayloadFieldNumber = 7,
    kStringPayloadFieldNumber = 8,
    kDateTimePayloadFieldNumber = 9,
  };
  // .ColmnarDB.NetworkClient.Message.QueryResponseIntPayload intPayload = 2;
  bool has_intpayload() const;
  private:
  bool _internal_has_intpayload() const;
  public:
  void clear_intpayload();
  const ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload& intpayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* release_intpayload();
  ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* mutable_intpayload();
  void set_allocated_intpayload(::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* intpayload);
  private:
  const ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload& _internal_intpayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* _internal_mutable_intpayload();
  public:

  // .ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload floatPayload = 3;
  bool has_floatpayload() const;
  private:
  bool _internal_has_floatpayload() const;
  public:
  void clear_floatpayload();
  const ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload& floatpayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* release_floatpayload();
  ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* mutable_floatpayload();
  void set_allocated_floatpayload(::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* floatpayload);
  private:
  const ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload& _internal_floatpayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* _internal_mutable_floatpayload();
  public:

  // .ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload int64Payload = 4;
  bool has_int64payload() const;
  private:
  bool _internal_has_int64payload() const;
  public:
  void clear_int64payload();
  const ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload& int64payload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* release_int64payload();
  ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* mutable_int64payload();
  void set_allocated_int64payload(::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* int64payload);
  private:
  const ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload& _internal_int64payload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* _internal_mutable_int64payload();
  public:

  // .ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload doublePayload = 5;
  bool has_doublepayload() const;
  private:
  bool _internal_has_doublepayload() const;
  public:
  void clear_doublepayload();
  const ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload& doublepayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* release_doublepayload();
  ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* mutable_doublepayload();
  void set_allocated_doublepayload(::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* doublepayload);
  private:
  const ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload& _internal_doublepayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* _internal_mutable_doublepayload();
  public:

  // .ColmnarDB.NetworkClient.Message.QueryResponsePointPayload pointPayload = 6;
  bool has_pointpayload() const;
  private:
  bool _internal_has_pointpayload() const;
  public:
  void clear_pointpayload();
  const ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload& pointpayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* release_pointpayload();
  ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* mutable_pointpayload();
  void set_allocated_pointpayload(::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* pointpayload);
  private:
  const ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload& _internal_pointpayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* _internal_mutable_pointpayload();
  public:

  // .ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload polygonPayload = 7;
  bool has_polygonpayload() const;
  private:
  bool _internal_has_polygonpayload() const;
  public:
  void clear_polygonpayload();
  const ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload& polygonpayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* release_polygonpayload();
  ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* mutable_polygonpayload();
  void set_allocated_polygonpayload(::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* polygonpayload);
  private:
  const ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload& _internal_polygonpayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* _internal_mutable_polygonpayload();
  public:

  // .ColmnarDB.NetworkClient.Message.QueryResponseStringPayload stringPayload = 8;
  bool has_stringpayload() const;
  private:
  bool _internal_has_stringpayload() const;
  public:
  void clear_stringpayload();
  const ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload& stringpayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* release_stringpayload();
  ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* mutable_stringpayload();
  void set_allocated_stringpayload(::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* stringpayload);
  private:
  const ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload& _internal_stringpayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* _internal_mutable_stringpayload();
  public:

  // .ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload dateTimePayload = 9;
  bool has_datetimepayload() const;
  private:
  bool _internal_has_datetimepayload() const;
  public:
  void clear_datetimepayload();
  const ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload& datetimepayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* release_datetimepayload();
  ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* mutable_datetimepayload();
  void set_allocated_datetimepayload(::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* datetimepayload);
  private:
  const ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload& _internal_datetimepayload() const;
  ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* _internal_mutable_datetimepayload();
  public:

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
 private:
  class _Internal;
  void set_has_intpayload();
  void set_has_floatpayload();
  void set_has_int64payload();
  void set_has_doublepayload();
  void set_has_pointpayload();
  void set_has_polygonpayload();
  void set_has_stringpayload();
  void set_has_datetimepayload();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* intpayload_;
    ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* floatpayload_;
    ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* int64payload_;
    ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* doublepayload_;
    ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* pointpayload_;
    ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* polygonpayload_;
    ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* stringpayload_;
    ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* datetimepayload_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// -------------------------------------------------------------------

class QueryResponseMessage_PayloadsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResponseMessage_PayloadsEntry_DoNotUse, 
    std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResponseMessage_PayloadsEntry_DoNotUse, 
    std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  QueryResponseMessage_PayloadsEntry_DoNotUse();
  QueryResponseMessage_PayloadsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryResponseMessage_PayloadsEntry_DoNotUse& other);
  static const QueryResponseMessage_PayloadsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryResponseMessage_PayloadsEntry_DoNotUse*>(&_QueryResponseMessage_PayloadsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ColmnarDB.NetworkClient.Message.QueryResponseMessage.PayloadsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class QueryResponseMessage_NullBitMasksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResponseMessage_NullBitMasksEntry_DoNotUse, 
    std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResponseMessage_NullBitMasksEntry_DoNotUse, 
    std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  QueryResponseMessage_NullBitMasksEntry_DoNotUse();
  QueryResponseMessage_NullBitMasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryResponseMessage_NullBitMasksEntry_DoNotUse& other);
  static const QueryResponseMessage_NullBitMasksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryResponseMessage_NullBitMasksEntry_DoNotUse*>(&_QueryResponseMessage_NullBitMasksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ColmnarDB.NetworkClient.Message.QueryResponseMessage.NullBitMasksEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class QueryResponseMessage_TimingEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResponseMessage_TimingEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResponseMessage_TimingEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  QueryResponseMessage_TimingEntry_DoNotUse();
  QueryResponseMessage_TimingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryResponseMessage_TimingEntry_DoNotUse& other);
  static const QueryResponseMessage_TimingEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryResponseMessage_TimingEntry_DoNotUse*>(&_QueryResponseMessage_TimingEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ColmnarDB.NetworkClient.Message.QueryResponseMessage.TimingEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class QueryResponseMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ColmnarDB.NetworkClient.Message.QueryResponseMessage) */ {
 public:
  QueryResponseMessage();
  virtual ~QueryResponseMessage();

  QueryResponseMessage(const QueryResponseMessage& from);
  QueryResponseMessage(QueryResponseMessage&& from) noexcept
    : QueryResponseMessage() {
    *this = ::std::move(from);
  }

  inline QueryResponseMessage& operator=(const QueryResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponseMessage& operator=(QueryResponseMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponseMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponseMessage* internal_default_instance() {
    return reinterpret_cast<const QueryResponseMessage*>(
               &_QueryResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryResponseMessage& a, QueryResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponseMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponseMessage* New() const final {
    return CreateMaybeMessage<QueryResponseMessage>(nullptr);
  }

  QueryResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponseMessage& from);
  void MergeFrom(const QueryResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ColmnarDB.NetworkClient.Message.QueryResponseMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fQueryResponseMessage_2eproto);
    return ::descriptor_table_messages_2fQueryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPayloadsFieldNumber = 1,
    kTimingFieldNumber = 2,
    kNullBitMasksFieldNumber = 3,
    kColumnOrderFieldNumber = 4,
  };
  // map<string, .ColmnarDB.NetworkClient.Message.QueryResponsePayload> payloads = 1;
  int payloads_size() const;
  private:
  int _internal_payloads_size() const;
  public:
  void clear_payloads();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >&
      _internal_payloads() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >*
      _internal_mutable_payloads();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >&
      payloads() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >*
      mutable_payloads();

  // map<string, float> timing = 2;
  int timing_size() const;
  private:
  int _internal_timing_size() const;
  public:
  void clear_timing();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_timing() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_timing();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      timing() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_timing();

  // map<string, .ColmnarDB.NetworkClient.Message.QueryNullmaskPayload> nullBitMasks = 3;
  int nullbitmasks_size() const;
  private:
  int _internal_nullbitmasks_size() const;
  public:
  void clear_nullbitmasks();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >&
      _internal_nullbitmasks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >*
      _internal_mutable_nullbitmasks();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >&
      nullbitmasks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >*
      mutable_nullbitmasks();

  // repeated string columnOrder = 4;
  int columnorder_size() const;
  private:
  int _internal_columnorder_size() const;
  public:
  void clear_columnorder();
  const std::string& columnorder(int index) const;
  std::string* mutable_columnorder(int index);
  void set_columnorder(int index, const std::string& value);
  void set_columnorder(int index, std::string&& value);
  void set_columnorder(int index, const char* value);
  void set_columnorder(int index, const char* value, size_t size);
  std::string* add_columnorder();
  void add_columnorder(const std::string& value);
  void add_columnorder(std::string&& value);
  void add_columnorder(const char* value);
  void add_columnorder(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& columnorder() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_columnorder();
  private:
  const std::string& _internal_columnorder(int index) const;
  std::string* _internal_add_columnorder();
  public:

  // @@protoc_insertion_point(class_scope:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryResponseMessage_PayloadsEntry_DoNotUse,
      std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > payloads_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryResponseMessage_TimingEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > timing_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryResponseMessage_NullBitMasksEntry_DoNotUse,
      std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > nullbitmasks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> columnorder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fQueryResponseMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryResponseIntPayload

// repeated int32 intData = 1;
inline int QueryResponseIntPayload::_internal_intdata_size() const {
  return intdata_.size();
}
inline int QueryResponseIntPayload::intdata_size() const {
  return _internal_intdata_size();
}
inline void QueryResponseIntPayload::clear_intdata() {
  intdata_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResponseIntPayload::_internal_intdata(int index) const {
  return intdata_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResponseIntPayload::intdata(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload.intData)
  return _internal_intdata(index);
}
inline void QueryResponseIntPayload::set_intdata(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  intdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload.intData)
}
inline void QueryResponseIntPayload::_internal_add_intdata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  intdata_.Add(value);
}
inline void QueryResponseIntPayload::add_intdata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_intdata(value);
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload.intData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryResponseIntPayload::_internal_intdata() const {
  return intdata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryResponseIntPayload::intdata() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload.intData)
  return _internal_intdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryResponseIntPayload::_internal_mutable_intdata() {
  return &intdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryResponseIntPayload::mutable_intdata() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload.intData)
  return _internal_mutable_intdata();
}

// -------------------------------------------------------------------

// QueryResponseInt64Payload

// repeated int64 int64Data = 1;
inline int QueryResponseInt64Payload::_internal_int64data_size() const {
  return int64data_.size();
}
inline int QueryResponseInt64Payload::int64data_size() const {
  return _internal_int64data_size();
}
inline void QueryResponseInt64Payload::clear_int64data() {
  int64data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryResponseInt64Payload::_internal_int64data(int index) const {
  return int64data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryResponseInt64Payload::int64data(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload.int64Data)
  return _internal_int64data(index);
}
inline void QueryResponseInt64Payload::set_int64data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload.int64Data)
}
inline void QueryResponseInt64Payload::_internal_add_int64data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64data_.Add(value);
}
inline void QueryResponseInt64Payload::add_int64data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int64data(value);
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload.int64Data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
QueryResponseInt64Payload::_internal_int64data() const {
  return int64data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
QueryResponseInt64Payload::int64data() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload.int64Data)
  return _internal_int64data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
QueryResponseInt64Payload::_internal_mutable_int64data() {
  return &int64data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
QueryResponseInt64Payload::mutable_int64data() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload.int64Data)
  return _internal_mutable_int64data();
}

// -------------------------------------------------------------------

// QueryResponseDateTimePayload

// repeated int64 dateTimeData = 1;
inline int QueryResponseDateTimePayload::_internal_datetimedata_size() const {
  return datetimedata_.size();
}
inline int QueryResponseDateTimePayload::datetimedata_size() const {
  return _internal_datetimedata_size();
}
inline void QueryResponseDateTimePayload::clear_datetimedata() {
  datetimedata_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryResponseDateTimePayload::_internal_datetimedata(int index) const {
  return datetimedata_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryResponseDateTimePayload::datetimedata(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload.dateTimeData)
  return _internal_datetimedata(index);
}
inline void QueryResponseDateTimePayload::set_datetimedata(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  datetimedata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload.dateTimeData)
}
inline void QueryResponseDateTimePayload::_internal_add_datetimedata(::PROTOBUF_NAMESPACE_ID::int64 value) {
  datetimedata_.Add(value);
}
inline void QueryResponseDateTimePayload::add_datetimedata(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_datetimedata(value);
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload.dateTimeData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
QueryResponseDateTimePayload::_internal_datetimedata() const {
  return datetimedata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
QueryResponseDateTimePayload::datetimedata() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload.dateTimeData)
  return _internal_datetimedata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
QueryResponseDateTimePayload::_internal_mutable_datetimedata() {
  return &datetimedata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
QueryResponseDateTimePayload::mutable_datetimedata() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload.dateTimeData)
  return _internal_mutable_datetimedata();
}

// -------------------------------------------------------------------

// QueryResponseFloatPayload

// repeated float floatData = 1;
inline int QueryResponseFloatPayload::_internal_floatdata_size() const {
  return floatdata_.size();
}
inline int QueryResponseFloatPayload::floatdata_size() const {
  return _internal_floatdata_size();
}
inline void QueryResponseFloatPayload::clear_floatdata() {
  floatdata_.Clear();
}
inline float QueryResponseFloatPayload::_internal_floatdata(int index) const {
  return floatdata_.Get(index);
}
inline float QueryResponseFloatPayload::floatdata(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload.floatData)
  return _internal_floatdata(index);
}
inline void QueryResponseFloatPayload::set_floatdata(int index, float value) {
  floatdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload.floatData)
}
inline void QueryResponseFloatPayload::_internal_add_floatdata(float value) {
  floatdata_.Add(value);
}
inline void QueryResponseFloatPayload::add_floatdata(float value) {
  _internal_add_floatdata(value);
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload.floatData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryResponseFloatPayload::_internal_floatdata() const {
  return floatdata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryResponseFloatPayload::floatdata() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload.floatData)
  return _internal_floatdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryResponseFloatPayload::_internal_mutable_floatdata() {
  return &floatdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryResponseFloatPayload::mutable_floatdata() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload.floatData)
  return _internal_mutable_floatdata();
}

// -------------------------------------------------------------------

// QueryResponseDoublePayload

// repeated double doubleData = 1;
inline int QueryResponseDoublePayload::_internal_doubledata_size() const {
  return doubledata_.size();
}
inline int QueryResponseDoublePayload::doubledata_size() const {
  return _internal_doubledata_size();
}
inline void QueryResponseDoublePayload::clear_doubledata() {
  doubledata_.Clear();
}
inline double QueryResponseDoublePayload::_internal_doubledata(int index) const {
  return doubledata_.Get(index);
}
inline double QueryResponseDoublePayload::doubledata(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload.doubleData)
  return _internal_doubledata(index);
}
inline void QueryResponseDoublePayload::set_doubledata(int index, double value) {
  doubledata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload.doubleData)
}
inline void QueryResponseDoublePayload::_internal_add_doubledata(double value) {
  doubledata_.Add(value);
}
inline void QueryResponseDoublePayload::add_doubledata(double value) {
  _internal_add_doubledata(value);
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload.doubleData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QueryResponseDoublePayload::_internal_doubledata() const {
  return doubledata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QueryResponseDoublePayload::doubledata() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload.doubleData)
  return _internal_doubledata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QueryResponseDoublePayload::_internal_mutable_doubledata() {
  return &doubledata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QueryResponseDoublePayload::mutable_doubledata() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload.doubleData)
  return _internal_mutable_doubledata();
}

// -------------------------------------------------------------------

// QueryResponsePolygonPayload

// repeated .ColmnarDB.Types.ComplexPolygon polygonData = 1;
inline int QueryResponsePolygonPayload::_internal_polygondata_size() const {
  return polygondata_.size();
}
inline int QueryResponsePolygonPayload::polygondata_size() const {
  return _internal_polygondata_size();
}
inline ::ColmnarDB::Types::ComplexPolygon* QueryResponsePolygonPayload::mutable_polygondata(int index) {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload.polygonData)
  return polygondata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColmnarDB::Types::ComplexPolygon >*
QueryResponsePolygonPayload::mutable_polygondata() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload.polygonData)
  return &polygondata_;
}
inline const ::ColmnarDB::Types::ComplexPolygon& QueryResponsePolygonPayload::_internal_polygondata(int index) const {
  return polygondata_.Get(index);
}
inline const ::ColmnarDB::Types::ComplexPolygon& QueryResponsePolygonPayload::polygondata(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload.polygonData)
  return _internal_polygondata(index);
}
inline ::ColmnarDB::Types::ComplexPolygon* QueryResponsePolygonPayload::_internal_add_polygondata() {
  return polygondata_.Add();
}
inline ::ColmnarDB::Types::ComplexPolygon* QueryResponsePolygonPayload::add_polygondata() {
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload.polygonData)
  return _internal_add_polygondata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColmnarDB::Types::ComplexPolygon >&
QueryResponsePolygonPayload::polygondata() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload.polygonData)
  return polygondata_;
}

// -------------------------------------------------------------------

// QueryResponsePointPayload

// repeated .ColmnarDB.Types.Point pointData = 1;
inline int QueryResponsePointPayload::_internal_pointdata_size() const {
  return pointdata_.size();
}
inline int QueryResponsePointPayload::pointdata_size() const {
  return _internal_pointdata_size();
}
inline ::ColmnarDB::Types::Point* QueryResponsePointPayload::mutable_pointdata(int index) {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload.pointData)
  return pointdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColmnarDB::Types::Point >*
QueryResponsePointPayload::mutable_pointdata() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload.pointData)
  return &pointdata_;
}
inline const ::ColmnarDB::Types::Point& QueryResponsePointPayload::_internal_pointdata(int index) const {
  return pointdata_.Get(index);
}
inline const ::ColmnarDB::Types::Point& QueryResponsePointPayload::pointdata(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload.pointData)
  return _internal_pointdata(index);
}
inline ::ColmnarDB::Types::Point* QueryResponsePointPayload::_internal_add_pointdata() {
  return pointdata_.Add();
}
inline ::ColmnarDB::Types::Point* QueryResponsePointPayload::add_pointdata() {
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload.pointData)
  return _internal_add_pointdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ColmnarDB::Types::Point >&
QueryResponsePointPayload::pointdata() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload.pointData)
  return pointdata_;
}

// -------------------------------------------------------------------

// QueryResponseStringPayload

// repeated string stringData = 1;
inline int QueryResponseStringPayload::_internal_stringdata_size() const {
  return stringdata_.size();
}
inline int QueryResponseStringPayload::stringdata_size() const {
  return _internal_stringdata_size();
}
inline void QueryResponseStringPayload::clear_stringdata() {
  stringdata_.Clear();
}
inline std::string* QueryResponseStringPayload::add_stringdata() {
  // @@protoc_insertion_point(field_add_mutable:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
  return _internal_add_stringdata();
}
inline const std::string& QueryResponseStringPayload::_internal_stringdata(int index) const {
  return stringdata_.Get(index);
}
inline const std::string& QueryResponseStringPayload::stringdata(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
  return _internal_stringdata(index);
}
inline std::string* QueryResponseStringPayload::mutable_stringdata(int index) {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
  return stringdata_.Mutable(index);
}
inline void QueryResponseStringPayload::set_stringdata(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
  stringdata_.Mutable(index)->assign(value);
}
inline void QueryResponseStringPayload::set_stringdata(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
  stringdata_.Mutable(index)->assign(std::move(value));
}
inline void QueryResponseStringPayload::set_stringdata(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stringdata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
}
inline void QueryResponseStringPayload::set_stringdata(int index, const char* value, size_t size) {
  stringdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
}
inline std::string* QueryResponseStringPayload::_internal_add_stringdata() {
  return stringdata_.Add();
}
inline void QueryResponseStringPayload::add_stringdata(const std::string& value) {
  stringdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
}
inline void QueryResponseStringPayload::add_stringdata(std::string&& value) {
  stringdata_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
}
inline void QueryResponseStringPayload::add_stringdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stringdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
}
inline void QueryResponseStringPayload::add_stringdata(const char* value, size_t size) {
  stringdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryResponseStringPayload::stringdata() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
  return stringdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryResponseStringPayload::mutable_stringdata() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData)
  return &stringdata_;
}

// -------------------------------------------------------------------

// QueryNullmaskPayload

// repeated uint32 nullMask = 1;
inline int QueryNullmaskPayload::_internal_nullmask_size() const {
  return nullmask_.size();
}
inline int QueryNullmaskPayload::nullmask_size() const {
  return _internal_nullmask_size();
}
inline void QueryNullmaskPayload::clear_nullmask() {
  nullmask_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryNullmaskPayload::_internal_nullmask(int index) const {
  return nullmask_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryNullmaskPayload::nullmask(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload.nullMask)
  return _internal_nullmask(index);
}
inline void QueryNullmaskPayload::set_nullmask(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nullmask_.Set(index, value);
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload.nullMask)
}
inline void QueryNullmaskPayload::_internal_add_nullmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nullmask_.Add(value);
}
inline void QueryNullmaskPayload::add_nullmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_nullmask(value);
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload.nullMask)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
QueryNullmaskPayload::_internal_nullmask() const {
  return nullmask_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
QueryNullmaskPayload::nullmask() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload.nullMask)
  return _internal_nullmask();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
QueryNullmaskPayload::_internal_mutable_nullmask() {
  return &nullmask_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
QueryNullmaskPayload::mutable_nullmask() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload.nullMask)
  return _internal_mutable_nullmask();
}

// -------------------------------------------------------------------

// QueryResponsePayload

// .ColmnarDB.NetworkClient.Message.QueryResponseIntPayload intPayload = 2;
inline bool QueryResponsePayload::_internal_has_intpayload() const {
  return payload_case() == kIntPayload;
}
inline bool QueryResponsePayload::has_intpayload() const {
  return _internal_has_intpayload();
}
inline void QueryResponsePayload::set_has_intpayload() {
  _oneof_case_[0] = kIntPayload;
}
inline void QueryResponsePayload::clear_intpayload() {
  if (_internal_has_intpayload()) {
    delete payload_.intpayload_;
    clear_has_payload();
  }
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* QueryResponsePayload::release_intpayload() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.QueryResponsePayload.intPayload)
  if (has_intpayload()) {
    clear_has_payload();
      ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* temp = payload_.intpayload_;
    payload_.intpayload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload& QueryResponsePayload::_internal_intpayload() const {
  return _internal_has_intpayload()
      ? *payload_.intpayload_
      : *reinterpret_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseIntPayload_default_instance_);
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload& QueryResponsePayload::intpayload() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponsePayload.intPayload)
  return _internal_intpayload();
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* QueryResponsePayload::_internal_mutable_intpayload() {
  if (!_internal_has_intpayload()) {
    clear_payload();
    set_has_intpayload();
    payload_.intpayload_ = CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload >(
        GetArenaNoVirtual());
  }
  return payload_.intpayload_;
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* QueryResponsePayload::mutable_intpayload() {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponsePayload.intPayload)
  return _internal_mutable_intpayload();
}

// .ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload floatPayload = 3;
inline bool QueryResponsePayload::_internal_has_floatpayload() const {
  return payload_case() == kFloatPayload;
}
inline bool QueryResponsePayload::has_floatpayload() const {
  return _internal_has_floatpayload();
}
inline void QueryResponsePayload::set_has_floatpayload() {
  _oneof_case_[0] = kFloatPayload;
}
inline void QueryResponsePayload::clear_floatpayload() {
  if (_internal_has_floatpayload()) {
    delete payload_.floatpayload_;
    clear_has_payload();
  }
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* QueryResponsePayload::release_floatpayload() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.QueryResponsePayload.floatPayload)
  if (has_floatpayload()) {
    clear_has_payload();
      ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* temp = payload_.floatpayload_;
    payload_.floatpayload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload& QueryResponsePayload::_internal_floatpayload() const {
  return _internal_has_floatpayload()
      ? *payload_.floatpayload_
      : *reinterpret_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseFloatPayload_default_instance_);
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload& QueryResponsePayload::floatpayload() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponsePayload.floatPayload)
  return _internal_floatpayload();
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* QueryResponsePayload::_internal_mutable_floatpayload() {
  if (!_internal_has_floatpayload()) {
    clear_payload();
    set_has_floatpayload();
    payload_.floatpayload_ = CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload >(
        GetArenaNoVirtual());
  }
  return payload_.floatpayload_;
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* QueryResponsePayload::mutable_floatpayload() {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponsePayload.floatPayload)
  return _internal_mutable_floatpayload();
}

// .ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload int64Payload = 4;
inline bool QueryResponsePayload::_internal_has_int64payload() const {
  return payload_case() == kInt64Payload;
}
inline bool QueryResponsePayload::has_int64payload() const {
  return _internal_has_int64payload();
}
inline void QueryResponsePayload::set_has_int64payload() {
  _oneof_case_[0] = kInt64Payload;
}
inline void QueryResponsePayload::clear_int64payload() {
  if (_internal_has_int64payload()) {
    delete payload_.int64payload_;
    clear_has_payload();
  }
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* QueryResponsePayload::release_int64payload() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.QueryResponsePayload.int64Payload)
  if (has_int64payload()) {
    clear_has_payload();
      ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* temp = payload_.int64payload_;
    payload_.int64payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload& QueryResponsePayload::_internal_int64payload() const {
  return _internal_has_int64payload()
      ? *payload_.int64payload_
      : *reinterpret_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseInt64Payload_default_instance_);
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload& QueryResponsePayload::int64payload() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponsePayload.int64Payload)
  return _internal_int64payload();
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* QueryResponsePayload::_internal_mutable_int64payload() {
  if (!_internal_has_int64payload()) {
    clear_payload();
    set_has_int64payload();
    payload_.int64payload_ = CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload >(
        GetArenaNoVirtual());
  }
  return payload_.int64payload_;
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* QueryResponsePayload::mutable_int64payload() {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponsePayload.int64Payload)
  return _internal_mutable_int64payload();
}

// .ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload doublePayload = 5;
inline bool QueryResponsePayload::_internal_has_doublepayload() const {
  return payload_case() == kDoublePayload;
}
inline bool QueryResponsePayload::has_doublepayload() const {
  return _internal_has_doublepayload();
}
inline void QueryResponsePayload::set_has_doublepayload() {
  _oneof_case_[0] = kDoublePayload;
}
inline void QueryResponsePayload::clear_doublepayload() {
  if (_internal_has_doublepayload()) {
    delete payload_.doublepayload_;
    clear_has_payload();
  }
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* QueryResponsePayload::release_doublepayload() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.QueryResponsePayload.doublePayload)
  if (has_doublepayload()) {
    clear_has_payload();
      ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* temp = payload_.doublepayload_;
    payload_.doublepayload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload& QueryResponsePayload::_internal_doublepayload() const {
  return _internal_has_doublepayload()
      ? *payload_.doublepayload_
      : *reinterpret_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseDoublePayload_default_instance_);
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload& QueryResponsePayload::doublepayload() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponsePayload.doublePayload)
  return _internal_doublepayload();
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* QueryResponsePayload::_internal_mutable_doublepayload() {
  if (!_internal_has_doublepayload()) {
    clear_payload();
    set_has_doublepayload();
    payload_.doublepayload_ = CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload >(
        GetArenaNoVirtual());
  }
  return payload_.doublepayload_;
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* QueryResponsePayload::mutable_doublepayload() {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponsePayload.doublePayload)
  return _internal_mutable_doublepayload();
}

// .ColmnarDB.NetworkClient.Message.QueryResponsePointPayload pointPayload = 6;
inline bool QueryResponsePayload::_internal_has_pointpayload() const {
  return payload_case() == kPointPayload;
}
inline bool QueryResponsePayload::has_pointpayload() const {
  return _internal_has_pointpayload();
}
inline void QueryResponsePayload::set_has_pointpayload() {
  _oneof_case_[0] = kPointPayload;
}
inline void QueryResponsePayload::clear_pointpayload() {
  if (_internal_has_pointpayload()) {
    delete payload_.pointpayload_;
    clear_has_payload();
  }
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* QueryResponsePayload::release_pointpayload() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.QueryResponsePayload.pointPayload)
  if (has_pointpayload()) {
    clear_has_payload();
      ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* temp = payload_.pointpayload_;
    payload_.pointpayload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload& QueryResponsePayload::_internal_pointpayload() const {
  return _internal_has_pointpayload()
      ? *payload_.pointpayload_
      : *reinterpret_cast< ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload*>(&::ColmnarDB::NetworkClient::Message::_QueryResponsePointPayload_default_instance_);
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload& QueryResponsePayload::pointpayload() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponsePayload.pointPayload)
  return _internal_pointpayload();
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* QueryResponsePayload::_internal_mutable_pointpayload() {
  if (!_internal_has_pointpayload()) {
    clear_payload();
    set_has_pointpayload();
    payload_.pointpayload_ = CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload >(
        GetArenaNoVirtual());
  }
  return payload_.pointpayload_;
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* QueryResponsePayload::mutable_pointpayload() {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponsePayload.pointPayload)
  return _internal_mutable_pointpayload();
}

// .ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload polygonPayload = 7;
inline bool QueryResponsePayload::_internal_has_polygonpayload() const {
  return payload_case() == kPolygonPayload;
}
inline bool QueryResponsePayload::has_polygonpayload() const {
  return _internal_has_polygonpayload();
}
inline void QueryResponsePayload::set_has_polygonpayload() {
  _oneof_case_[0] = kPolygonPayload;
}
inline void QueryResponsePayload::clear_polygonpayload() {
  if (_internal_has_polygonpayload()) {
    delete payload_.polygonpayload_;
    clear_has_payload();
  }
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* QueryResponsePayload::release_polygonpayload() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.QueryResponsePayload.polygonPayload)
  if (has_polygonpayload()) {
    clear_has_payload();
      ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* temp = payload_.polygonpayload_;
    payload_.polygonpayload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload& QueryResponsePayload::_internal_polygonpayload() const {
  return _internal_has_polygonpayload()
      ? *payload_.polygonpayload_
      : *reinterpret_cast< ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload*>(&::ColmnarDB::NetworkClient::Message::_QueryResponsePolygonPayload_default_instance_);
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload& QueryResponsePayload::polygonpayload() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponsePayload.polygonPayload)
  return _internal_polygonpayload();
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* QueryResponsePayload::_internal_mutable_polygonpayload() {
  if (!_internal_has_polygonpayload()) {
    clear_payload();
    set_has_polygonpayload();
    payload_.polygonpayload_ = CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload >(
        GetArenaNoVirtual());
  }
  return payload_.polygonpayload_;
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* QueryResponsePayload::mutable_polygonpayload() {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponsePayload.polygonPayload)
  return _internal_mutable_polygonpayload();
}

// .ColmnarDB.NetworkClient.Message.QueryResponseStringPayload stringPayload = 8;
inline bool QueryResponsePayload::_internal_has_stringpayload() const {
  return payload_case() == kStringPayload;
}
inline bool QueryResponsePayload::has_stringpayload() const {
  return _internal_has_stringpayload();
}
inline void QueryResponsePayload::set_has_stringpayload() {
  _oneof_case_[0] = kStringPayload;
}
inline void QueryResponsePayload::clear_stringpayload() {
  if (_internal_has_stringpayload()) {
    delete payload_.stringpayload_;
    clear_has_payload();
  }
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* QueryResponsePayload::release_stringpayload() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.QueryResponsePayload.stringPayload)
  if (has_stringpayload()) {
    clear_has_payload();
      ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* temp = payload_.stringpayload_;
    payload_.stringpayload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload& QueryResponsePayload::_internal_stringpayload() const {
  return _internal_has_stringpayload()
      ? *payload_.stringpayload_
      : *reinterpret_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseStringPayload_default_instance_);
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload& QueryResponsePayload::stringpayload() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponsePayload.stringPayload)
  return _internal_stringpayload();
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* QueryResponsePayload::_internal_mutable_stringpayload() {
  if (!_internal_has_stringpayload()) {
    clear_payload();
    set_has_stringpayload();
    payload_.stringpayload_ = CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload >(
        GetArenaNoVirtual());
  }
  return payload_.stringpayload_;
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* QueryResponsePayload::mutable_stringpayload() {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponsePayload.stringPayload)
  return _internal_mutable_stringpayload();
}

// .ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload dateTimePayload = 9;
inline bool QueryResponsePayload::_internal_has_datetimepayload() const {
  return payload_case() == kDateTimePayload;
}
inline bool QueryResponsePayload::has_datetimepayload() const {
  return _internal_has_datetimepayload();
}
inline void QueryResponsePayload::set_has_datetimepayload() {
  _oneof_case_[0] = kDateTimePayload;
}
inline void QueryResponsePayload::clear_datetimepayload() {
  if (_internal_has_datetimepayload()) {
    delete payload_.datetimepayload_;
    clear_has_payload();
  }
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* QueryResponsePayload::release_datetimepayload() {
  // @@protoc_insertion_point(field_release:ColmnarDB.NetworkClient.Message.QueryResponsePayload.dateTimePayload)
  if (has_datetimepayload()) {
    clear_has_payload();
      ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* temp = payload_.datetimepayload_;
    payload_.datetimepayload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload& QueryResponsePayload::_internal_datetimepayload() const {
  return _internal_has_datetimepayload()
      ? *payload_.datetimepayload_
      : *reinterpret_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseDateTimePayload_default_instance_);
}
inline const ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload& QueryResponsePayload::datetimepayload() const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponsePayload.dateTimePayload)
  return _internal_datetimepayload();
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* QueryResponsePayload::_internal_mutable_datetimepayload() {
  if (!_internal_has_datetimepayload()) {
    clear_payload();
    set_has_datetimepayload();
    payload_.datetimepayload_ = CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload >(
        GetArenaNoVirtual());
  }
  return payload_.datetimepayload_;
}
inline ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* QueryResponsePayload::mutable_datetimepayload() {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponsePayload.dateTimePayload)
  return _internal_mutable_datetimepayload();
}

inline bool QueryResponsePayload::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void QueryResponsePayload::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline QueryResponsePayload::PayloadCase QueryResponsePayload::payload_case() const {
  return QueryResponsePayload::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryResponseMessage

// map<string, .ColmnarDB.NetworkClient.Message.QueryResponsePayload> payloads = 1;
inline int QueryResponseMessage::_internal_payloads_size() const {
  return payloads_.size();
}
inline int QueryResponseMessage::payloads_size() const {
  return _internal_payloads_size();
}
inline void QueryResponseMessage::clear_payloads() {
  payloads_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >&
QueryResponseMessage::_internal_payloads() const {
  return payloads_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >&
QueryResponseMessage::payloads() const {
  // @@protoc_insertion_point(field_map:ColmnarDB.NetworkClient.Message.QueryResponseMessage.payloads)
  return _internal_payloads();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >*
QueryResponseMessage::_internal_mutable_payloads() {
  return payloads_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >*
QueryResponseMessage::mutable_payloads() {
  // @@protoc_insertion_point(field_mutable_map:ColmnarDB.NetworkClient.Message.QueryResponseMessage.payloads)
  return _internal_mutable_payloads();
}

// map<string, .ColmnarDB.NetworkClient.Message.QueryNullmaskPayload> nullBitMasks = 3;
inline int QueryResponseMessage::_internal_nullbitmasks_size() const {
  return nullbitmasks_.size();
}
inline int QueryResponseMessage::nullbitmasks_size() const {
  return _internal_nullbitmasks_size();
}
inline void QueryResponseMessage::clear_nullbitmasks() {
  nullbitmasks_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >&
QueryResponseMessage::_internal_nullbitmasks() const {
  return nullbitmasks_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >&
QueryResponseMessage::nullbitmasks() const {
  // @@protoc_insertion_point(field_map:ColmnarDB.NetworkClient.Message.QueryResponseMessage.nullBitMasks)
  return _internal_nullbitmasks();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >*
QueryResponseMessage::_internal_mutable_nullbitmasks() {
  return nullbitmasks_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >*
QueryResponseMessage::mutable_nullbitmasks() {
  // @@protoc_insertion_point(field_mutable_map:ColmnarDB.NetworkClient.Message.QueryResponseMessage.nullBitMasks)
  return _internal_mutable_nullbitmasks();
}

// map<string, float> timing = 2;
inline int QueryResponseMessage::_internal_timing_size() const {
  return timing_.size();
}
inline int QueryResponseMessage::timing_size() const {
  return _internal_timing_size();
}
inline void QueryResponseMessage::clear_timing() {
  timing_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
QueryResponseMessage::_internal_timing() const {
  return timing_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
QueryResponseMessage::timing() const {
  // @@protoc_insertion_point(field_map:ColmnarDB.NetworkClient.Message.QueryResponseMessage.timing)
  return _internal_timing();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
QueryResponseMessage::_internal_mutable_timing() {
  return timing_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
QueryResponseMessage::mutable_timing() {
  // @@protoc_insertion_point(field_mutable_map:ColmnarDB.NetworkClient.Message.QueryResponseMessage.timing)
  return _internal_mutable_timing();
}

// repeated string columnOrder = 4;
inline int QueryResponseMessage::_internal_columnorder_size() const {
  return columnorder_.size();
}
inline int QueryResponseMessage::columnorder_size() const {
  return _internal_columnorder_size();
}
inline void QueryResponseMessage::clear_columnorder() {
  columnorder_.Clear();
}
inline std::string* QueryResponseMessage::add_columnorder() {
  // @@protoc_insertion_point(field_add_mutable:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
  return _internal_add_columnorder();
}
inline const std::string& QueryResponseMessage::_internal_columnorder(int index) const {
  return columnorder_.Get(index);
}
inline const std::string& QueryResponseMessage::columnorder(int index) const {
  // @@protoc_insertion_point(field_get:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
  return _internal_columnorder(index);
}
inline std::string* QueryResponseMessage::mutable_columnorder(int index) {
  // @@protoc_insertion_point(field_mutable:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
  return columnorder_.Mutable(index);
}
inline void QueryResponseMessage::set_columnorder(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
  columnorder_.Mutable(index)->assign(value);
}
inline void QueryResponseMessage::set_columnorder(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
  columnorder_.Mutable(index)->assign(std::move(value));
}
inline void QueryResponseMessage::set_columnorder(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columnorder_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
}
inline void QueryResponseMessage::set_columnorder(int index, const char* value, size_t size) {
  columnorder_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
}
inline std::string* QueryResponseMessage::_internal_add_columnorder() {
  return columnorder_.Add();
}
inline void QueryResponseMessage::add_columnorder(const std::string& value) {
  columnorder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
}
inline void QueryResponseMessage::add_columnorder(std::string&& value) {
  columnorder_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
}
inline void QueryResponseMessage::add_columnorder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  columnorder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
}
inline void QueryResponseMessage::add_columnorder(const char* value, size_t size) {
  columnorder_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryResponseMessage::columnorder() const {
  // @@protoc_insertion_point(field_list:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
  return columnorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryResponseMessage::mutable_columnorder() {
  // @@protoc_insertion_point(field_mutable_list:ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder)
  return &columnorder_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2fQueryResponseMessage_2eproto
