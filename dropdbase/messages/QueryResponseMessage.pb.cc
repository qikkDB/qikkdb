// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/QueryResponseMessage.proto

#include "messages/QueryResponseMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryNullmaskPayload_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseDateTimePayload_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseDoublePayload_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseFloatPayload_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseInt64Payload_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseIntPayload_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponseMessage_NullBitMasksEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponseMessage_PayloadsEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseMessage_TimingEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_QueryResponsePayload_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponsePointPayload_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponsePolygonPayload_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2fQueryResponseMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseStringPayload_messages_2fQueryResponseMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2fComplexPolygon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ComplexPolygon_Types_2fComplexPolygon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2fPoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point_Types_2fPoint_2eproto;
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {
class QueryResponseIntPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponseIntPayload> _instance;
} _QueryResponseIntPayload_default_instance_;
class QueryResponseInt64PayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponseInt64Payload> _instance;
} _QueryResponseInt64Payload_default_instance_;
class QueryResponseDateTimePayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponseDateTimePayload> _instance;
} _QueryResponseDateTimePayload_default_instance_;
class QueryResponseFloatPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponseFloatPayload> _instance;
} _QueryResponseFloatPayload_default_instance_;
class QueryResponseDoublePayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponseDoublePayload> _instance;
} _QueryResponseDoublePayload_default_instance_;
class QueryResponsePolygonPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponsePolygonPayload> _instance;
} _QueryResponsePolygonPayload_default_instance_;
class QueryResponsePointPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponsePointPayload> _instance;
} _QueryResponsePointPayload_default_instance_;
class QueryResponseStringPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponseStringPayload> _instance;
} _QueryResponseStringPayload_default_instance_;
class QueryNullmaskPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryNullmaskPayload> _instance;
} _QueryNullmaskPayload_default_instance_;
class QueryResponsePayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponsePayload> _instance;
  const ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* intpayload_;
  const ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* floatpayload_;
  const ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* int64payload_;
  const ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* doublepayload_;
  const ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* pointpayload_;
  const ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* polygonpayload_;
  const ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* stringpayload_;
  const ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* datetimepayload_;
} _QueryResponsePayload_default_instance_;
class QueryResponseMessage_PayloadsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponseMessage_PayloadsEntry_DoNotUse> _instance;
} _QueryResponseMessage_PayloadsEntry_DoNotUse_default_instance_;
class QueryResponseMessage_NullBitMasksEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponseMessage_NullBitMasksEntry_DoNotUse> _instance;
} _QueryResponseMessage_NullBitMasksEntry_DoNotUse_default_instance_;
class QueryResponseMessage_TimingEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponseMessage_TimingEntry_DoNotUse> _instance;
} _QueryResponseMessage_TimingEntry_DoNotUse_default_instance_;
class QueryResponseMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponseMessage> _instance;
} _QueryResponseMessage_default_instance_;
}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB
static void InitDefaultsscc_info_QueryNullmaskPayload_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryNullmaskPayload_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryNullmaskPayload_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryNullmaskPayload_messages_2fQueryResponseMessage_2eproto}, {}};

static void InitDefaultsscc_info_QueryResponseDateTimePayload_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponseDateTimePayload_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseDateTimePayload_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryResponseDateTimePayload_messages_2fQueryResponseMessage_2eproto}, {}};

static void InitDefaultsscc_info_QueryResponseDoublePayload_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponseDoublePayload_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseDoublePayload_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryResponseDoublePayload_messages_2fQueryResponseMessage_2eproto}, {}};

static void InitDefaultsscc_info_QueryResponseFloatPayload_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponseFloatPayload_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseFloatPayload_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryResponseFloatPayload_messages_2fQueryResponseMessage_2eproto}, {}};

static void InitDefaultsscc_info_QueryResponseInt64Payload_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponseInt64Payload_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseInt64Payload_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryResponseInt64Payload_messages_2fQueryResponseMessage_2eproto}, {}};

static void InitDefaultsscc_info_QueryResponseIntPayload_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponseIntPayload_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseIntPayload_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryResponseIntPayload_messages_2fQueryResponseMessage_2eproto}, {}};

static void InitDefaultsscc_info_QueryResponseMessage_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponseMessage_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponseMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponseMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_QueryResponseMessage_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_QueryResponseMessage_messages_2fQueryResponseMessage_2eproto}, {
      &scc_info_QueryResponseMessage_PayloadsEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto.base,
      &scc_info_QueryResponseMessage_NullBitMasksEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto.base,
      &scc_info_QueryResponseMessage_TimingEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto.base,}};

static void InitDefaultsscc_info_QueryResponseMessage_NullBitMasksEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponseMessage_NullBitMasksEntry_DoNotUse_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse();
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponseMessage_NullBitMasksEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResponseMessage_NullBitMasksEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto}, {
      &scc_info_QueryNullmaskPayload_messages_2fQueryResponseMessage_2eproto.base,}};

static void InitDefaultsscc_info_QueryResponseMessage_PayloadsEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponseMessage_PayloadsEntry_DoNotUse_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse();
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponseMessage_PayloadsEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResponseMessage_PayloadsEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto}, {
      &scc_info_QueryResponsePayload_messages_2fQueryResponseMessage_2eproto.base,}};

static void InitDefaultsscc_info_QueryResponseMessage_TimingEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponseMessage_TimingEntry_DoNotUse_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse();
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseMessage_TimingEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryResponseMessage_TimingEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto}, {}};

static void InitDefaultsscc_info_QueryResponsePayload_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponsePayload_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponsePayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponsePayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_QueryResponsePayload_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_QueryResponsePayload_messages_2fQueryResponseMessage_2eproto}, {
      &scc_info_QueryResponseIntPayload_messages_2fQueryResponseMessage_2eproto.base,
      &scc_info_QueryResponseFloatPayload_messages_2fQueryResponseMessage_2eproto.base,
      &scc_info_QueryResponseInt64Payload_messages_2fQueryResponseMessage_2eproto.base,
      &scc_info_QueryResponseDoublePayload_messages_2fQueryResponseMessage_2eproto.base,
      &scc_info_QueryResponsePointPayload_messages_2fQueryResponseMessage_2eproto.base,
      &scc_info_QueryResponsePolygonPayload_messages_2fQueryResponseMessage_2eproto.base,
      &scc_info_QueryResponseStringPayload_messages_2fQueryResponseMessage_2eproto.base,
      &scc_info_QueryResponseDateTimePayload_messages_2fQueryResponseMessage_2eproto.base,}};

static void InitDefaultsscc_info_QueryResponsePointPayload_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponsePointPayload_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponsePointPayload_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResponsePointPayload_messages_2fQueryResponseMessage_2eproto}, {
      &scc_info_Point_Types_2fPoint_2eproto.base,}};

static void InitDefaultsscc_info_QueryResponsePolygonPayload_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponsePolygonPayload_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResponsePolygonPayload_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResponsePolygonPayload_messages_2fQueryResponseMessage_2eproto}, {
      &scc_info_ComplexPolygon_Types_2fComplexPolygon_2eproto.base,}};

static void InitDefaultsscc_info_QueryResponseStringPayload_messages_2fQueryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ColmnarDB::NetworkClient::Message::_QueryResponseStringPayload_default_instance_;
    new (ptr) ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResponseStringPayload_messages_2fQueryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryResponseStringPayload_messages_2fQueryResponseMessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2fQueryResponseMessage_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messages_2fQueryResponseMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2fQueryResponseMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2fQueryResponseMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload, intdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload, int64data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload, datetimedata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload, floatdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload, doubledata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload, polygondata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload, pointdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload, stringdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload, nullmask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponsePayload, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponsePayload, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ColmnarDB::NetworkClient::Message::QueryResponsePayloadDefaultTypeInternal, intpayload_),
  offsetof(::ColmnarDB::NetworkClient::Message::QueryResponsePayloadDefaultTypeInternal, floatpayload_),
  offsetof(::ColmnarDB::NetworkClient::Message::QueryResponsePayloadDefaultTypeInternal, int64payload_),
  offsetof(::ColmnarDB::NetworkClient::Message::QueryResponsePayloadDefaultTypeInternal, doublepayload_),
  offsetof(::ColmnarDB::NetworkClient::Message::QueryResponsePayloadDefaultTypeInternal, pointpayload_),
  offsetof(::ColmnarDB::NetworkClient::Message::QueryResponsePayloadDefaultTypeInternal, polygonpayload_),
  offsetof(::ColmnarDB::NetworkClient::Message::QueryResponsePayloadDefaultTypeInternal, stringpayload_),
  offsetof(::ColmnarDB::NetworkClient::Message::QueryResponsePayloadDefaultTypeInternal, datetimepayload_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponsePayload, payload_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage, payloads_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage, nullbitmasks_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage, timing_),
  PROTOBUF_FIELD_OFFSET(::ColmnarDB::NetworkClient::Message::QueryResponseMessage, columnorder_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload)},
  { 6, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload)},
  { 12, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload)},
  { 18, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload)},
  { 24, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload)},
  { 30, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload)},
  { 36, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload)},
  { 42, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload)},
  { 48, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload)},
  { 54, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponsePayload)},
  { 68, 75, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse)},
  { 77, 84, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse)},
  { 86, 93, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse)},
  { 95, -1, sizeof(::ColmnarDB::NetworkClient::Message::QueryResponseMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseIntPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseInt64Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseDateTimePayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseFloatPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseDoublePayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponsePolygonPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponsePointPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseStringPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryNullmaskPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponsePayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseMessage_PayloadsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseMessage_NullBitMasksEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseMessage_TimingEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ColmnarDB::NetworkClient::Message::_QueryResponseMessage_default_instance_),
};

const char descriptor_table_protodef_messages_2fQueryResponseMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#messages/QueryResponseMessage.proto\022\037C"
  "olmnarDB.NetworkClient.Message\032\032Types/Co"
  "mplexPolygon.proto\032\021Types/Point.proto\"*\n"
  "\027QueryResponseIntPayload\022\017\n\007intData\030\001 \003("
  "\005\".\n\031QueryResponseInt64Payload\022\021\n\tint64D"
  "ata\030\001 \003(\003\"4\n\034QueryResponseDateTimePayloa"
  "d\022\024\n\014dateTimeData\030\001 \003(\003\".\n\031QueryResponse"
  "FloatPayload\022\021\n\tfloatData\030\001 \003(\002\"0\n\032Query"
  "ResponseDoublePayload\022\022\n\ndoubleData\030\001 \003("
  "\001\"S\n\033QueryResponsePolygonPayload\0224\n\013poly"
  "gonData\030\001 \003(\0132\037.ColmnarDB.Types.ComplexP"
  "olygon\"F\n\031QueryResponsePointPayload\022)\n\tp"
  "ointData\030\001 \003(\0132\026.ColmnarDB.Types.Point\"0"
  "\n\032QueryResponseStringPayload\022\022\n\nstringDa"
  "ta\030\001 \003(\t\"(\n\024QueryNullmaskPayload\022\020\n\010null"
  "Mask\030\001 \003(\r\"\313\005\n\024QueryResponsePayload\022N\n\ni"
  "ntPayload\030\002 \001(\01328.ColmnarDB.NetworkClien"
  "t.Message.QueryResponseIntPayloadH\000\022R\n\014f"
  "loatPayload\030\003 \001(\0132:.ColmnarDB.NetworkCli"
  "ent.Message.QueryResponseFloatPayloadH\000\022"
  "R\n\014int64Payload\030\004 \001(\0132:.ColmnarDB.Networ"
  "kClient.Message.QueryResponseInt64Payloa"
  "dH\000\022T\n\rdoublePayload\030\005 \001(\0132;.ColmnarDB.N"
  "etworkClient.Message.QueryResponseDouble"
  "PayloadH\000\022R\n\014pointPayload\030\006 \001(\0132:.Colmna"
  "rDB.NetworkClient.Message.QueryResponseP"
  "ointPayloadH\000\022V\n\016polygonPayload\030\007 \001(\0132<."
  "ColmnarDB.NetworkClient.Message.QueryRes"
  "ponsePolygonPayloadH\000\022T\n\rstringPayload\030\010"
  " \001(\0132;.ColmnarDB.NetworkClient.Message.Q"
  "ueryResponseStringPayloadH\000\022X\n\017dateTimeP"
  "ayload\030\t \001(\0132=.ColmnarDB.NetworkClient.M"
  "essage.QueryResponseDateTimePayloadH\000B\t\n"
  "\007payload\"\267\004\n\024QueryResponseMessage\022U\n\010pay"
  "loads\030\001 \003(\0132C.ColmnarDB.NetworkClient.Me"
  "ssage.QueryResponseMessage.PayloadsEntry"
  "\022]\n\014nullBitMasks\030\003 \003(\0132G.ColmnarDB.Netwo"
  "rkClient.Message.QueryResponseMessage.Nu"
  "llBitMasksEntry\022Q\n\006timing\030\002 \003(\0132A.Colmna"
  "rDB.NetworkClient.Message.QueryResponseM"
  "essage.TimingEntry\022\023\n\013columnOrder\030\004 \003(\t\032"
  "f\n\rPayloadsEntry\022\013\n\003key\030\001 \001(\t\022D\n\005value\030\002"
  " \001(\01325.ColmnarDB.NetworkClient.Message.Q"
  "ueryResponsePayload:\0028\001\032j\n\021NullBitMasksE"
  "ntry\022\013\n\003key\030\001 \001(\t\022D\n\005value\030\002 \001(\01325.Colmn"
  "arDB.NetworkClient.Message.QueryNullmask"
  "Payload:\0028\001\032-\n\013TimingEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\002:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2fQueryResponseMessage_2eproto_deps[2] = {
  &::descriptor_table_Types_2fComplexPolygon_2eproto,
  &::descriptor_table_Types_2fPoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_2fQueryResponseMessage_2eproto_sccs[14] = {
  &scc_info_QueryNullmaskPayload_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponseDateTimePayload_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponseDoublePayload_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponseFloatPayload_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponseInt64Payload_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponseIntPayload_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponseMessage_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponseMessage_NullBitMasksEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponseMessage_PayloadsEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponseMessage_TimingEntry_DoNotUse_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponsePayload_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponsePointPayload_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponsePolygonPayload_messages_2fQueryResponseMessage_2eproto.base,
  &scc_info_QueryResponseStringPayload_messages_2fQueryResponseMessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2fQueryResponseMessage_2eproto_once;
static bool descriptor_table_messages_2fQueryResponseMessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2fQueryResponseMessage_2eproto = {
  &descriptor_table_messages_2fQueryResponseMessage_2eproto_initialized, descriptor_table_protodef_messages_2fQueryResponseMessage_2eproto, "messages/QueryResponseMessage.proto", 1906,
  &descriptor_table_messages_2fQueryResponseMessage_2eproto_once, descriptor_table_messages_2fQueryResponseMessage_2eproto_sccs, descriptor_table_messages_2fQueryResponseMessage_2eproto_deps, 14, 2,
  schemas, file_default_instances, TableStruct_messages_2fQueryResponseMessage_2eproto::offsets,
  file_level_metadata_messages_2fQueryResponseMessage_2eproto, 14, file_level_enum_descriptors_messages_2fQueryResponseMessage_2eproto, file_level_service_descriptors_messages_2fQueryResponseMessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2fQueryResponseMessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2fQueryResponseMessage_2eproto), true);
namespace ColmnarDB {
namespace NetworkClient {
namespace Message {

// ===================================================================

void QueryResponseIntPayload::InitAsDefaultInstance() {
}
class QueryResponseIntPayload::_Internal {
 public:
};

QueryResponseIntPayload::QueryResponseIntPayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
}
QueryResponseIntPayload::QueryResponseIntPayload(const QueryResponseIntPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      intdata_(from.intdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
}

void QueryResponseIntPayload::SharedCtor() {
}

QueryResponseIntPayload::~QueryResponseIntPayload() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
  SharedDtor();
}

void QueryResponseIntPayload::SharedDtor() {
}

void QueryResponseIntPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponseIntPayload& QueryResponseIntPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponseIntPayload_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryResponseIntPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intdata_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryResponseIntPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 intData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_intdata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponseIntPayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 intData = 1;
  {
    int byte_size = _intdata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_intdata(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
  return target;
}

size_t QueryResponseIntPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 intData = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intdata_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intdata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponseIntPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponseIntPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponseIntPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
    MergeFrom(*source);
  }
}

void QueryResponseIntPayload::MergeFrom(const QueryResponseIntPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intdata_.MergeFrom(from.intdata_);
}

void QueryResponseIntPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponseIntPayload::CopyFrom(const QueryResponseIntPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseIntPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponseIntPayload::IsInitialized() const {
  return true;
}

void QueryResponseIntPayload::InternalSwap(QueryResponseIntPayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  intdata_.InternalSwap(&other->intdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponseIntPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResponseInt64Payload::InitAsDefaultInstance() {
}
class QueryResponseInt64Payload::_Internal {
 public:
};

QueryResponseInt64Payload::QueryResponseInt64Payload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
}
QueryResponseInt64Payload::QueryResponseInt64Payload(const QueryResponseInt64Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      int64data_(from.int64data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
}

void QueryResponseInt64Payload::SharedCtor() {
}

QueryResponseInt64Payload::~QueryResponseInt64Payload() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
  SharedDtor();
}

void QueryResponseInt64Payload::SharedDtor() {
}

void QueryResponseInt64Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponseInt64Payload& QueryResponseInt64Payload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponseInt64Payload_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryResponseInt64Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int64data_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryResponseInt64Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 int64Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_int64data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponseInt64Payload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 int64Data = 1;
  {
    int byte_size = _int64data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_int64data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
  return target;
}

size_t QueryResponseInt64Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 int64Data = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponseInt64Payload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponseInt64Payload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponseInt64Payload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
    MergeFrom(*source);
  }
}

void QueryResponseInt64Payload::MergeFrom(const QueryResponseInt64Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  int64data_.MergeFrom(from.int64data_);
}

void QueryResponseInt64Payload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponseInt64Payload::CopyFrom(const QueryResponseInt64Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponseInt64Payload::IsInitialized() const {
  return true;
}

void QueryResponseInt64Payload::InternalSwap(QueryResponseInt64Payload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  int64data_.InternalSwap(&other->int64data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponseInt64Payload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResponseDateTimePayload::InitAsDefaultInstance() {
}
class QueryResponseDateTimePayload::_Internal {
 public:
};

QueryResponseDateTimePayload::QueryResponseDateTimePayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
}
QueryResponseDateTimePayload::QueryResponseDateTimePayload(const QueryResponseDateTimePayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      datetimedata_(from.datetimedata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
}

void QueryResponseDateTimePayload::SharedCtor() {
}

QueryResponseDateTimePayload::~QueryResponseDateTimePayload() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
  SharedDtor();
}

void QueryResponseDateTimePayload::SharedDtor() {
}

void QueryResponseDateTimePayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponseDateTimePayload& QueryResponseDateTimePayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponseDateTimePayload_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryResponseDateTimePayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datetimedata_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryResponseDateTimePayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 dateTimeData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_datetimedata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_datetimedata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponseDateTimePayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dateTimeData = 1;
  {
    int byte_size = _datetimedata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_datetimedata(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
  return target;
}

size_t QueryResponseDateTimePayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dateTimeData = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->datetimedata_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _datetimedata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponseDateTimePayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponseDateTimePayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponseDateTimePayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
    MergeFrom(*source);
  }
}

void QueryResponseDateTimePayload::MergeFrom(const QueryResponseDateTimePayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datetimedata_.MergeFrom(from.datetimedata_);
}

void QueryResponseDateTimePayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponseDateTimePayload::CopyFrom(const QueryResponseDateTimePayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponseDateTimePayload::IsInitialized() const {
  return true;
}

void QueryResponseDateTimePayload::InternalSwap(QueryResponseDateTimePayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datetimedata_.InternalSwap(&other->datetimedata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponseDateTimePayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResponseFloatPayload::InitAsDefaultInstance() {
}
class QueryResponseFloatPayload::_Internal {
 public:
};

QueryResponseFloatPayload::QueryResponseFloatPayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
}
QueryResponseFloatPayload::QueryResponseFloatPayload(const QueryResponseFloatPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      floatdata_(from.floatdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
}

void QueryResponseFloatPayload::SharedCtor() {
}

QueryResponseFloatPayload::~QueryResponseFloatPayload() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
  SharedDtor();
}

void QueryResponseFloatPayload::SharedDtor() {
}

void QueryResponseFloatPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponseFloatPayload& QueryResponseFloatPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponseFloatPayload_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryResponseFloatPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  floatdata_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryResponseFloatPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float floatData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floatdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_floatdata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponseFloatPayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float floatData = 1;
  if (this->_internal_floatdata_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_floatdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
  return target;
}

size_t QueryResponseFloatPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float floatData = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floatdata_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _floatdata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponseFloatPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponseFloatPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponseFloatPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
    MergeFrom(*source);
  }
}

void QueryResponseFloatPayload::MergeFrom(const QueryResponseFloatPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  floatdata_.MergeFrom(from.floatdata_);
}

void QueryResponseFloatPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponseFloatPayload::CopyFrom(const QueryResponseFloatPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponseFloatPayload::IsInitialized() const {
  return true;
}

void QueryResponseFloatPayload::InternalSwap(QueryResponseFloatPayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  floatdata_.InternalSwap(&other->floatdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponseFloatPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResponseDoublePayload::InitAsDefaultInstance() {
}
class QueryResponseDoublePayload::_Internal {
 public:
};

QueryResponseDoublePayload::QueryResponseDoublePayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
}
QueryResponseDoublePayload::QueryResponseDoublePayload(const QueryResponseDoublePayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      doubledata_(from.doubledata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
}

void QueryResponseDoublePayload::SharedCtor() {
}

QueryResponseDoublePayload::~QueryResponseDoublePayload() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
  SharedDtor();
}

void QueryResponseDoublePayload::SharedDtor() {
}

void QueryResponseDoublePayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponseDoublePayload& QueryResponseDoublePayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponseDoublePayload_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryResponseDoublePayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doubledata_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryResponseDoublePayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double doubleData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_doubledata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_doubledata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponseDoublePayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double doubleData = 1;
  if (this->_internal_doubledata_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_doubledata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
  return target;
}

size_t QueryResponseDoublePayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double doubleData = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_doubledata_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _doubledata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponseDoublePayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponseDoublePayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponseDoublePayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
    MergeFrom(*source);
  }
}

void QueryResponseDoublePayload::MergeFrom(const QueryResponseDoublePayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doubledata_.MergeFrom(from.doubledata_);
}

void QueryResponseDoublePayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponseDoublePayload::CopyFrom(const QueryResponseDoublePayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponseDoublePayload::IsInitialized() const {
  return true;
}

void QueryResponseDoublePayload::InternalSwap(QueryResponseDoublePayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doubledata_.InternalSwap(&other->doubledata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponseDoublePayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResponsePolygonPayload::InitAsDefaultInstance() {
}
class QueryResponsePolygonPayload::_Internal {
 public:
};

void QueryResponsePolygonPayload::clear_polygondata() {
  polygondata_.Clear();
}
QueryResponsePolygonPayload::QueryResponsePolygonPayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
}
QueryResponsePolygonPayload::QueryResponsePolygonPayload(const QueryResponsePolygonPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      polygondata_(from.polygondata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
}

void QueryResponsePolygonPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResponsePolygonPayload_messages_2fQueryResponseMessage_2eproto.base);
}

QueryResponsePolygonPayload::~QueryResponsePolygonPayload() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
  SharedDtor();
}

void QueryResponsePolygonPayload::SharedDtor() {
}

void QueryResponsePolygonPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponsePolygonPayload& QueryResponsePolygonPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponsePolygonPayload_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryResponsePolygonPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygondata_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryResponsePolygonPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ColmnarDB.Types.ComplexPolygon polygonData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygondata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponsePolygonPayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ColmnarDB.Types.ComplexPolygon polygonData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygondata_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_polygondata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
  return target;
}

size_t QueryResponsePolygonPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ColmnarDB.Types.ComplexPolygon polygonData = 1;
  total_size += 1UL * this->_internal_polygondata_size();
  for (const auto& msg : this->polygondata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponsePolygonPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponsePolygonPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponsePolygonPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
    MergeFrom(*source);
  }
}

void QueryResponsePolygonPayload::MergeFrom(const QueryResponsePolygonPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygondata_.MergeFrom(from.polygondata_);
}

void QueryResponsePolygonPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponsePolygonPayload::CopyFrom(const QueryResponsePolygonPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponsePolygonPayload::IsInitialized() const {
  return true;
}

void QueryResponsePolygonPayload::InternalSwap(QueryResponsePolygonPayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  polygondata_.InternalSwap(&other->polygondata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponsePolygonPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResponsePointPayload::InitAsDefaultInstance() {
}
class QueryResponsePointPayload::_Internal {
 public:
};

void QueryResponsePointPayload::clear_pointdata() {
  pointdata_.Clear();
}
QueryResponsePointPayload::QueryResponsePointPayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
}
QueryResponsePointPayload::QueryResponsePointPayload(const QueryResponsePointPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pointdata_(from.pointdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
}

void QueryResponsePointPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResponsePointPayload_messages_2fQueryResponseMessage_2eproto.base);
}

QueryResponsePointPayload::~QueryResponsePointPayload() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
  SharedDtor();
}

void QueryResponsePointPayload::SharedDtor() {
}

void QueryResponsePointPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponsePointPayload& QueryResponsePointPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponsePointPayload_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryResponsePointPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pointdata_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryResponsePointPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ColmnarDB.Types.Point pointData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pointdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponsePointPayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ColmnarDB.Types.Point pointData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pointdata_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_pointdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
  return target;
}

size_t QueryResponsePointPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ColmnarDB.Types.Point pointData = 1;
  total_size += 1UL * this->_internal_pointdata_size();
  for (const auto& msg : this->pointdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponsePointPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponsePointPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponsePointPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
    MergeFrom(*source);
  }
}

void QueryResponsePointPayload::MergeFrom(const QueryResponsePointPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pointdata_.MergeFrom(from.pointdata_);
}

void QueryResponsePointPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponsePointPayload::CopyFrom(const QueryResponsePointPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePointPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponsePointPayload::IsInitialized() const {
  return true;
}

void QueryResponsePointPayload::InternalSwap(QueryResponsePointPayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pointdata_.InternalSwap(&other->pointdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponsePointPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResponseStringPayload::InitAsDefaultInstance() {
}
class QueryResponseStringPayload::_Internal {
 public:
};

QueryResponseStringPayload::QueryResponseStringPayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
}
QueryResponseStringPayload::QueryResponseStringPayload(const QueryResponseStringPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stringdata_(from.stringdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
}

void QueryResponseStringPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResponseStringPayload_messages_2fQueryResponseMessage_2eproto.base);
}

QueryResponseStringPayload::~QueryResponseStringPayload() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
  SharedDtor();
}

void QueryResponseStringPayload::SharedDtor() {
}

void QueryResponseStringPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponseStringPayload& QueryResponseStringPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponseStringPayload_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryResponseStringPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stringdata_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryResponseStringPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string stringData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_stringdata(), ptr, ctx, "ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponseStringPayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string stringData = 1;
  for (int i = 0, n = this->_internal_stringdata_size(); i < n; i++) {
    const auto& s = this->_internal_stringdata(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ColmnarDB.NetworkClient.Message.QueryResponseStringPayload.stringData");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
  return target;
}

size_t QueryResponseStringPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stringData = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stringdata_.size());
  for (int i = 0, n = stringdata_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stringdata_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponseStringPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponseStringPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponseStringPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
    MergeFrom(*source);
  }
}

void QueryResponseStringPayload::MergeFrom(const QueryResponseStringPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stringdata_.MergeFrom(from.stringdata_);
}

void QueryResponseStringPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponseStringPayload::CopyFrom(const QueryResponseStringPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseStringPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponseStringPayload::IsInitialized() const {
  return true;
}

void QueryResponseStringPayload::InternalSwap(QueryResponseStringPayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stringdata_.InternalSwap(&other->stringdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponseStringPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryNullmaskPayload::InitAsDefaultInstance() {
}
class QueryNullmaskPayload::_Internal {
 public:
};

QueryNullmaskPayload::QueryNullmaskPayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
}
QueryNullmaskPayload::QueryNullmaskPayload(const QueryNullmaskPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nullmask_(from.nullmask_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
}

void QueryNullmaskPayload::SharedCtor() {
}

QueryNullmaskPayload::~QueryNullmaskPayload() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
  SharedDtor();
}

void QueryNullmaskPayload::SharedDtor() {
}

void QueryNullmaskPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryNullmaskPayload& QueryNullmaskPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryNullmaskPayload_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryNullmaskPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nullmask_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryNullmaskPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 nullMask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_nullmask(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_nullmask(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryNullmaskPayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 nullMask = 1;
  {
    int byte_size = _nullmask_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_nullmask(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
  return target;
}

size_t QueryNullmaskPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 nullMask = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->nullmask_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nullmask_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryNullmaskPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryNullmaskPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryNullmaskPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
    MergeFrom(*source);
  }
}

void QueryNullmaskPayload::MergeFrom(const QueryNullmaskPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nullmask_.MergeFrom(from.nullmask_);
}

void QueryNullmaskPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryNullmaskPayload::CopyFrom(const QueryNullmaskPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryNullmaskPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNullmaskPayload::IsInitialized() const {
  return true;
}

void QueryNullmaskPayload::InternalSwap(QueryNullmaskPayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nullmask_.InternalSwap(&other->nullmask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryNullmaskPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryResponsePayload::InitAsDefaultInstance() {
  ::ColmnarDB::NetworkClient::Message::_QueryResponsePayload_default_instance_.intpayload_ = const_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload*>(
      ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload::internal_default_instance());
  ::ColmnarDB::NetworkClient::Message::_QueryResponsePayload_default_instance_.floatpayload_ = const_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload*>(
      ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload::internal_default_instance());
  ::ColmnarDB::NetworkClient::Message::_QueryResponsePayload_default_instance_.int64payload_ = const_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload*>(
      ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload::internal_default_instance());
  ::ColmnarDB::NetworkClient::Message::_QueryResponsePayload_default_instance_.doublepayload_ = const_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload*>(
      ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload::internal_default_instance());
  ::ColmnarDB::NetworkClient::Message::_QueryResponsePayload_default_instance_.pointpayload_ = const_cast< ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload*>(
      ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload::internal_default_instance());
  ::ColmnarDB::NetworkClient::Message::_QueryResponsePayload_default_instance_.polygonpayload_ = const_cast< ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload*>(
      ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload::internal_default_instance());
  ::ColmnarDB::NetworkClient::Message::_QueryResponsePayload_default_instance_.stringpayload_ = const_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload*>(
      ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload::internal_default_instance());
  ::ColmnarDB::NetworkClient::Message::_QueryResponsePayload_default_instance_.datetimepayload_ = const_cast< ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload*>(
      ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload::internal_default_instance());
}
class QueryResponsePayload::_Internal {
 public:
  static const ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload& intpayload(const QueryResponsePayload* msg);
  static const ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload& floatpayload(const QueryResponsePayload* msg);
  static const ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload& int64payload(const QueryResponsePayload* msg);
  static const ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload& doublepayload(const QueryResponsePayload* msg);
  static const ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload& pointpayload(const QueryResponsePayload* msg);
  static const ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload& polygonpayload(const QueryResponsePayload* msg);
  static const ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload& stringpayload(const QueryResponsePayload* msg);
  static const ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload& datetimepayload(const QueryResponsePayload* msg);
};

const ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload&
QueryResponsePayload::_Internal::intpayload(const QueryResponsePayload* msg) {
  return *msg->payload_.intpayload_;
}
const ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload&
QueryResponsePayload::_Internal::floatpayload(const QueryResponsePayload* msg) {
  return *msg->payload_.floatpayload_;
}
const ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload&
QueryResponsePayload::_Internal::int64payload(const QueryResponsePayload* msg) {
  return *msg->payload_.int64payload_;
}
const ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload&
QueryResponsePayload::_Internal::doublepayload(const QueryResponsePayload* msg) {
  return *msg->payload_.doublepayload_;
}
const ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload&
QueryResponsePayload::_Internal::pointpayload(const QueryResponsePayload* msg) {
  return *msg->payload_.pointpayload_;
}
const ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload&
QueryResponsePayload::_Internal::polygonpayload(const QueryResponsePayload* msg) {
  return *msg->payload_.polygonpayload_;
}
const ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload&
QueryResponsePayload::_Internal::stringpayload(const QueryResponsePayload* msg) {
  return *msg->payload_.stringpayload_;
}
const ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload&
QueryResponsePayload::_Internal::datetimepayload(const QueryResponsePayload* msg) {
  return *msg->payload_.datetimepayload_;
}
void QueryResponsePayload::set_allocated_intpayload(::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* intpayload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (intpayload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intpayload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intpayload, submessage_arena);
    }
    set_has_intpayload();
    payload_.intpayload_ = intpayload;
  }
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.QueryResponsePayload.intPayload)
}
void QueryResponsePayload::set_allocated_floatpayload(::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* floatpayload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (floatpayload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      floatpayload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, floatpayload, submessage_arena);
    }
    set_has_floatpayload();
    payload_.floatpayload_ = floatpayload;
  }
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.QueryResponsePayload.floatPayload)
}
void QueryResponsePayload::set_allocated_int64payload(::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* int64payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (int64payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      int64payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int64payload, submessage_arena);
    }
    set_has_int64payload();
    payload_.int64payload_ = int64payload;
  }
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.QueryResponsePayload.int64Payload)
}
void QueryResponsePayload::set_allocated_doublepayload(::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* doublepayload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (doublepayload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      doublepayload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doublepayload, submessage_arena);
    }
    set_has_doublepayload();
    payload_.doublepayload_ = doublepayload;
  }
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.QueryResponsePayload.doublePayload)
}
void QueryResponsePayload::set_allocated_pointpayload(::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* pointpayload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (pointpayload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pointpayload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointpayload, submessage_arena);
    }
    set_has_pointpayload();
    payload_.pointpayload_ = pointpayload;
  }
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.QueryResponsePayload.pointPayload)
}
void QueryResponsePayload::set_allocated_polygonpayload(::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* polygonpayload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (polygonpayload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      polygonpayload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygonpayload, submessage_arena);
    }
    set_has_polygonpayload();
    payload_.polygonpayload_ = polygonpayload;
  }
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.QueryResponsePayload.polygonPayload)
}
void QueryResponsePayload::set_allocated_stringpayload(::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* stringpayload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (stringpayload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stringpayload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stringpayload, submessage_arena);
    }
    set_has_stringpayload();
    payload_.stringpayload_ = stringpayload;
  }
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.QueryResponsePayload.stringPayload)
}
void QueryResponsePayload::set_allocated_datetimepayload(::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* datetimepayload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (datetimepayload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      datetimepayload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datetimepayload, submessage_arena);
    }
    set_has_datetimepayload();
    payload_.datetimepayload_ = datetimepayload;
  }
  // @@protoc_insertion_point(field_set_allocated:ColmnarDB.NetworkClient.Message.QueryResponsePayload.dateTimePayload)
}
QueryResponsePayload::QueryResponsePayload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
}
QueryResponsePayload::QueryResponsePayload(const QueryResponsePayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kIntPayload: {
      _internal_mutable_intpayload()->::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload::MergeFrom(from._internal_intpayload());
      break;
    }
    case kFloatPayload: {
      _internal_mutable_floatpayload()->::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload::MergeFrom(from._internal_floatpayload());
      break;
    }
    case kInt64Payload: {
      _internal_mutable_int64payload()->::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload::MergeFrom(from._internal_int64payload());
      break;
    }
    case kDoublePayload: {
      _internal_mutable_doublepayload()->::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload::MergeFrom(from._internal_doublepayload());
      break;
    }
    case kPointPayload: {
      _internal_mutable_pointpayload()->::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload::MergeFrom(from._internal_pointpayload());
      break;
    }
    case kPolygonPayload: {
      _internal_mutable_polygonpayload()->::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload::MergeFrom(from._internal_polygonpayload());
      break;
    }
    case kStringPayload: {
      _internal_mutable_stringpayload()->::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload::MergeFrom(from._internal_stringpayload());
      break;
    }
    case kDateTimePayload: {
      _internal_mutable_datetimepayload()->::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload::MergeFrom(from._internal_datetimepayload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
}

void QueryResponsePayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResponsePayload_messages_2fQueryResponseMessage_2eproto.base);
  clear_has_payload();
}

QueryResponsePayload::~QueryResponsePayload() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
  SharedDtor();
}

void QueryResponsePayload::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void QueryResponsePayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponsePayload& QueryResponsePayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponsePayload_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryResponsePayload::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
  switch (payload_case()) {
    case kIntPayload: {
      delete payload_.intpayload_;
      break;
    }
    case kFloatPayload: {
      delete payload_.floatpayload_;
      break;
    }
    case kInt64Payload: {
      delete payload_.int64payload_;
      break;
    }
    case kDoublePayload: {
      delete payload_.doublepayload_;
      break;
    }
    case kPointPayload: {
      delete payload_.pointpayload_;
      break;
    }
    case kPolygonPayload: {
      delete payload_.polygonpayload_;
      break;
    }
    case kStringPayload: {
      delete payload_.stringpayload_;
      break;
    }
    case kDateTimePayload: {
      delete payload_.datetimepayload_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void QueryResponsePayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear();
}

const char* QueryResponsePayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ColmnarDB.NetworkClient.Message.QueryResponseIntPayload intPayload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_intpayload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload floatPayload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_floatpayload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload int64Payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_int64payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload doublePayload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_doublepayload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ColmnarDB.NetworkClient.Message.QueryResponsePointPayload pointPayload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pointpayload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload polygonPayload = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygonpayload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ColmnarDB.NetworkClient.Message.QueryResponseStringPayload stringPayload = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stringpayload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload dateTimePayload = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_datetimepayload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponsePayload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ColmnarDB.NetworkClient.Message.QueryResponseIntPayload intPayload = 2;
  if (_internal_has_intpayload()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::intpayload(this), target, stream);
  }

  // .ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload floatPayload = 3;
  if (_internal_has_floatpayload()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::floatpayload(this), target, stream);
  }

  // .ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload int64Payload = 4;
  if (_internal_has_int64payload()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::int64payload(this), target, stream);
  }

  // .ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload doublePayload = 5;
  if (_internal_has_doublepayload()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::doublepayload(this), target, stream);
  }

  // .ColmnarDB.NetworkClient.Message.QueryResponsePointPayload pointPayload = 6;
  if (_internal_has_pointpayload()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::pointpayload(this), target, stream);
  }

  // .ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload polygonPayload = 7;
  if (_internal_has_polygonpayload()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::polygonpayload(this), target, stream);
  }

  // .ColmnarDB.NetworkClient.Message.QueryResponseStringPayload stringPayload = 8;
  if (_internal_has_stringpayload()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::stringpayload(this), target, stream);
  }

  // .ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload dateTimePayload = 9;
  if (_internal_has_datetimepayload()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::datetimepayload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
  return target;
}

size_t QueryResponsePayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .ColmnarDB.NetworkClient.Message.QueryResponseIntPayload intPayload = 2;
    case kIntPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.intpayload_);
      break;
    }
    // .ColmnarDB.NetworkClient.Message.QueryResponseFloatPayload floatPayload = 3;
    case kFloatPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.floatpayload_);
      break;
    }
    // .ColmnarDB.NetworkClient.Message.QueryResponseInt64Payload int64Payload = 4;
    case kInt64Payload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.int64payload_);
      break;
    }
    // .ColmnarDB.NetworkClient.Message.QueryResponseDoublePayload doublePayload = 5;
    case kDoublePayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.doublepayload_);
      break;
    }
    // .ColmnarDB.NetworkClient.Message.QueryResponsePointPayload pointPayload = 6;
    case kPointPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.pointpayload_);
      break;
    }
    // .ColmnarDB.NetworkClient.Message.QueryResponsePolygonPayload polygonPayload = 7;
    case kPolygonPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.polygonpayload_);
      break;
    }
    // .ColmnarDB.NetworkClient.Message.QueryResponseStringPayload stringPayload = 8;
    case kStringPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.stringpayload_);
      break;
    }
    // .ColmnarDB.NetworkClient.Message.QueryResponseDateTimePayload dateTimePayload = 9;
    case kDateTimePayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.datetimepayload_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponsePayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponsePayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponsePayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
    MergeFrom(*source);
  }
}

void QueryResponsePayload::MergeFrom(const QueryResponsePayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kIntPayload: {
      _internal_mutable_intpayload()->::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload::MergeFrom(from._internal_intpayload());
      break;
    }
    case kFloatPayload: {
      _internal_mutable_floatpayload()->::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload::MergeFrom(from._internal_floatpayload());
      break;
    }
    case kInt64Payload: {
      _internal_mutable_int64payload()->::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload::MergeFrom(from._internal_int64payload());
      break;
    }
    case kDoublePayload: {
      _internal_mutable_doublepayload()->::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload::MergeFrom(from._internal_doublepayload());
      break;
    }
    case kPointPayload: {
      _internal_mutable_pointpayload()->::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload::MergeFrom(from._internal_pointpayload());
      break;
    }
    case kPolygonPayload: {
      _internal_mutable_polygonpayload()->::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload::MergeFrom(from._internal_polygonpayload());
      break;
    }
    case kStringPayload: {
      _internal_mutable_stringpayload()->::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload::MergeFrom(from._internal_stringpayload());
      break;
    }
    case kDateTimePayload: {
      _internal_mutable_datetimepayload()->::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload::MergeFrom(from._internal_datetimepayload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void QueryResponsePayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponsePayload::CopyFrom(const QueryResponsePayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponsePayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponsePayload::IsInitialized() const {
  return true;
}

void QueryResponsePayload::InternalSwap(QueryResponsePayload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponsePayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

QueryResponseMessage_PayloadsEntry_DoNotUse::QueryResponseMessage_PayloadsEntry_DoNotUse() {}
QueryResponseMessage_PayloadsEntry_DoNotUse::QueryResponseMessage_PayloadsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryResponseMessage_PayloadsEntry_DoNotUse::MergeFrom(const QueryResponseMessage_PayloadsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryResponseMessage_PayloadsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QueryResponseMessage_PayloadsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

QueryResponseMessage_NullBitMasksEntry_DoNotUse::QueryResponseMessage_NullBitMasksEntry_DoNotUse() {}
QueryResponseMessage_NullBitMasksEntry_DoNotUse::QueryResponseMessage_NullBitMasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryResponseMessage_NullBitMasksEntry_DoNotUse::MergeFrom(const QueryResponseMessage_NullBitMasksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryResponseMessage_NullBitMasksEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QueryResponseMessage_NullBitMasksEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

QueryResponseMessage_TimingEntry_DoNotUse::QueryResponseMessage_TimingEntry_DoNotUse() {}
QueryResponseMessage_TimingEntry_DoNotUse::QueryResponseMessage_TimingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryResponseMessage_TimingEntry_DoNotUse::MergeFrom(const QueryResponseMessage_TimingEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryResponseMessage_TimingEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QueryResponseMessage_TimingEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void QueryResponseMessage::InitAsDefaultInstance() {
}
class QueryResponseMessage::_Internal {
 public:
};

QueryResponseMessage::QueryResponseMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
}
QueryResponseMessage::QueryResponseMessage(const QueryResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      columnorder_(from.columnorder_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payloads_.MergeFrom(from.payloads_);
  timing_.MergeFrom(from.timing_);
  nullbitmasks_.MergeFrom(from.nullbitmasks_);
  // @@protoc_insertion_point(copy_constructor:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
}

void QueryResponseMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResponseMessage_messages_2fQueryResponseMessage_2eproto.base);
}

QueryResponseMessage::~QueryResponseMessage() {
  // @@protoc_insertion_point(destructor:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
  SharedDtor();
}

void QueryResponseMessage::SharedDtor() {
}

void QueryResponseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResponseMessage& QueryResponseMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResponseMessage_messages_2fQueryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void QueryResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payloads_.Clear();
  timing_.Clear();
  nullbitmasks_.Clear();
  columnorder_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryResponseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .ColmnarDB.NetworkClient.Message.QueryResponsePayload> payloads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&payloads_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, float> timing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&timing_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .ColmnarDB.NetworkClient.Message.QueryNullmaskPayload> nullBitMasks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&nullbitmasks_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string columnOrder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_columnorder(), ptr, ctx, "ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponseMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .ColmnarDB.NetworkClient.Message.QueryResponsePayload> payloads = 1;
  if (!this->_internal_payloads().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ColmnarDB.NetworkClient.Message.QueryResponseMessage.PayloadsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_payloads().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_payloads().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >::const_iterator
          it = this->_internal_payloads().begin();
          it != this->_internal_payloads().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryResponseMessage_PayloadsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >::const_iterator
          it = this->_internal_payloads().begin();
          it != this->_internal_payloads().end(); ++it) {
        target = QueryResponseMessage_PayloadsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, float> timing = 2;
  if (!this->_internal_timing().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ColmnarDB.NetworkClient.Message.QueryResponseMessage.TimingEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_timing().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_timing().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_timing().begin();
          it != this->_internal_timing().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryResponseMessage_TimingEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_timing().begin();
          it != this->_internal_timing().end(); ++it) {
        target = QueryResponseMessage_TimingEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .ColmnarDB.NetworkClient.Message.QueryNullmaskPayload> nullBitMasks = 3;
  if (!this->_internal_nullbitmasks().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ColmnarDB.NetworkClient.Message.QueryResponseMessage.NullBitMasksEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_nullbitmasks().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_nullbitmasks().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >::const_iterator
          it = this->_internal_nullbitmasks().begin();
          it != this->_internal_nullbitmasks().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryResponseMessage_NullBitMasksEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >::const_iterator
          it = this->_internal_nullbitmasks().begin();
          it != this->_internal_nullbitmasks().end(); ++it) {
        target = QueryResponseMessage_NullBitMasksEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string columnOrder = 4;
  for (int i = 0, n = this->_internal_columnorder_size(); i < n; i++) {
    const auto& s = this->_internal_columnorder(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ColmnarDB.NetworkClient.Message.QueryResponseMessage.columnOrder");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
  return target;
}

size_t QueryResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ColmnarDB.NetworkClient.Message.QueryResponsePayload> payloads = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_payloads_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >::const_iterator
      it = this->_internal_payloads().begin();
      it != this->_internal_payloads().end(); ++it) {
    total_size += QueryResponseMessage_PayloadsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> timing = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_timing_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_timing().begin();
      it != this->_internal_timing().end(); ++it) {
    total_size += QueryResponseMessage_TimingEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .ColmnarDB.NetworkClient.Message.QueryNullmaskPayload> nullBitMasks = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nullbitmasks_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >::const_iterator
      it = this->_internal_nullbitmasks().begin();
      it != this->_internal_nullbitmasks().end(); ++it) {
    total_size += QueryResponseMessage_NullBitMasksEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string columnOrder = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(columnorder_.size());
  for (int i = 0, n = columnorder_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      columnorder_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponseMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponseMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponseMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
    MergeFrom(*source);
  }
}

void QueryResponseMessage::MergeFrom(const QueryResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payloads_.MergeFrom(from.payloads_);
  timing_.MergeFrom(from.timing_);
  nullbitmasks_.MergeFrom(from.nullbitmasks_);
  columnorder_.MergeFrom(from.columnorder_);
}

void QueryResponseMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponseMessage::CopyFrom(const QueryResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColmnarDB.NetworkClient.Message.QueryResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponseMessage::IsInitialized() const {
  return true;
}

void QueryResponseMessage::InternalSwap(QueryResponseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payloads_.Swap(&other->payloads_);
  timing_.Swap(&other->timing_);
  nullbitmasks_.Swap(&other->nullbitmasks_);
  columnorder_.InternalSwap(&other->columnorder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponseMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace NetworkClient
}  // namespace ColmnarDB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponseIntPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponseInt64Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponseDateTimePayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponseFloatPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponseDoublePayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponsePolygonPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponsePointPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponseStringPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryNullmaskPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponsePayload* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponsePayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_PayloadsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_NullBitMasksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponseMessage_TimingEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ColmnarDB::NetworkClient::Message::QueryResponseMessage* Arena::CreateMaybeMessage< ::ColmnarDB::NetworkClient::Message::QueryResponseMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ColmnarDB::NetworkClient::Message::QueryResponseMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
